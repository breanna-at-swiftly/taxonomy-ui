import { Tree } from "react-arborist";
import { useMemo } from "react";
import type { GraphExportData } from "../hooks/useGraphExport";

interface TreeNode {
  id: string;
  name: string;
  children?: TreeNode[];
  data: {
    node_type_id: number;
    source_id: string;
    notes: string;
    metadata: string;
  };
}

interface TreeViewProps {
  graphData: GraphExportData;
}

const testData = {
  id: "root",
  name: "Root Node",
  children: [
    { id: "1", name: "Test Node 1" },
    {
      id: "2",
      name: "Test Node 2",
      children: [{ id: "2.1", name: "Test Node 2.1" }],
    },
  ],
};

export const TreeView: React.FC<TreeViewProps> = ({ graphData }) => {
  const treeData = useMemo(() => {
    // Transform graph data into tree structure
    const nodeMap = new Map(
      graphData.nodes.map((node) => [
        node.node_id,
        {
          id: node.node_id,
          name: node.name,
          children: [],
          data: {
            node_type_id: node.node_type_id,
            source_id: node.source_id,
            notes: node.notes,
            metadata: node.metadata,
          },
        },
      ])
    );

    // Build parent-child relationships
    graphData.links.forEach((link) => {
      const parent = nodeMap.get(link.from_node_id);
      const child = nodeMap.get(link.to_node_id);
      if (parent && child) {
        if (!parent.children) parent.children = [];
        parent.children.push(child);
      }
    });

    // Find root node
    return nodeMap.get(graphData.graph.root_node_id);
  }, [graphData]);

  if (!treeData) return null;

  return (
    <div style={{ height: "100%", width: "100%" }}>
      <Tree
        initialData={treeData} // Changed from testData to treeData
        openByDefault={false}
        width={800}
        height={600}
        indent={24}
        rowHeight={32}
      >
        {({ node, style }) => (
          <div
            style={{
              ...style,
              display: "flex",
              alignItems: "center",
              cursor: "pointer",
              padding: "0 8px",
            }}
            onClick={() => node.toggle()}
          >
            {node.data.name}
          </div>
        )}
      </Tree>
    </div>
  );
};
