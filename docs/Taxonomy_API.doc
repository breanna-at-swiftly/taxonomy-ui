Message-ID: <1215369565.59.1751325121534@007154f7cd40>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_58_1098090628.1751325121534"

------=_Part_58_1098090628.1751325121534
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>Taxonomy  API</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        table {
            border: solid 1px;
            border-collapse: collapse;
        }

        table td, table th {
            border: solid 1px;
            padding: 5px;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font: var(--ds-font-body-small, Arial, Helvetica, FreeSans, sans-se=
rif);
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: var(--ds-surface, #fff) !important;
        color: var(--ds-text, #000) !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: var(--ds-text, #000);
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        page-break-after: avoid;
    }

    pre {
        font: var(--ds-font-code, Monaco, "Courier New", monospace);
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    /* CONF-28544 cannot print multiple pages in IE */
    #splitter-content {
        position: relative !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }

    .no-print, .no-print * {
        display: none !important;
    }
}
-->
    </style>
</head>
<body>
    <h1>Taxonomy  API</h1>
    <div class=3D"Section1">
        <h1 id=3D"TaxonomyAPI-Schema">Schema</h1><span class=3D"confluence-=
embedded-file-wrapper image-center-wrapper confluence-embedded-manual-size"=
><img class=3D"confluence-embedded-image image-center" alt=3D"Swiftly_taxon=
omy_schema V2.png" width=3D"468" loading=3D"lazy" src=3D"f159402e7fda27e62c=
30fcdfc3f31a99341a4eca5781ab50b7b2433b7ac2e085" data-image-src=3D"https://s=
wiftlysystems.atlassian.net/wiki/download/attachments/146997254/Swiftly_tax=
onomy_schema%20V2.png?version=3D1&amp;modificationDate=3D1709144493336&amp;=
cacheVersion=3D1&amp;api=3Dv2" data-height=3D"634" data-width=3D"1107" data=
-unresolved-comment-count=3D"0" data-linked-resource-id=3D"150143029" data-=
linked-resource-version=3D"1" data-linked-resource-type=3D"attachment" data=
-linked-resource-default-alias=3D"Swiftly_taxonomy_schema V2.png" data-base=
-url=3D"https://swiftlysystems.atlassian.net/wiki" data-linked-resource-con=
tent-type=3D"image/png" data-linked-resource-container-id=3D"146997254" dat=
a-linked-resource-container-version=3D"36" data-media-id=3D"158d7654-7388-4=
f12-ab56-1132ff0216e3" data-media-type=3D"file" height=3D"267"></span>
<h1 id=3D"TaxonomyAPI-API">API</h1>
<p>Swiftly=E2=80=99s Taxonomy system is implemented as a multi-tenant, mult=
i-purpose database with an API that provides definition, modification, quer=
y and management functions. Some additional concepts and API functions are =
included which link Taxonomy concepts to other important Swiftly Domains, s=
uch as Products.</p>
<h2 id=3D"TaxonomyAPI-graph-create">graph-create</h2>
<p>Create a new graph (header) =E2=80=93 also creates root node</p>
<h3 id=3D"TaxonomyAPI-Request">Request</h3>
<p>POST api/taxonomy/graph/create</p>
<h3 id=3D"TaxonomyAPI-Fields">Fields</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"0a=
79d20b-3f37-4a75-a468-c4312cc9cc2d" class=3D"confluenceTable">
<colgroup>
<col style=3D"width: 136.0px;">
<col style=3D"width: 111.0px;">
<col style=3D"width: 109.0px;">
<col style=3D"width: 400.0px;">
</colgroup>
<tbody>
<tr>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Field</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Type</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Required</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Description</strong></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>name</p></td>
<td class=3D"confluenceTd">
<p>String</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>name of the graph</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>notes</p></td>
<td class=3D"confluenceTd">
<p>String</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>description of the graph</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>topology_id</p></td>
<td class=3D"confluenceTd">
<p>Integer</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>defaults to 1: definition of "shape" of graph.</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>updated_by</p></td>
<td class=3D"confluenceTd">
<p>String</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>identification of creating or updating user.</p></td>
</tr>
</tbody>
</table>
</div>
<p>&nbsp;Example</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{
&nbsp; &nbsp; "name": "animals",
&nbsp; &nbsp; "notes": "a hierarchy of animals",
&nbsp; &nbsp; "topology_id": 2
    "updated_by": "breanna@swiftly.com"
}</pre>
</div>
</div>
<p>&nbsp;Response</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{
&nbsp; &nbsp; "graph_id": 29,
&nbsp; &nbsp; "topology_id": 2,
&nbsp; &nbsp; "name": "animals",
&nbsp; &nbsp; "notes": "a hierarchy of animals",
&nbsp; &nbsp; "root_node_id": "2D8D9BE9-0098-41B7-8CE0-4BA74C3AC133",
&nbsp; &nbsp; "inserted_datetime": "2024-01-09T14:39:53.757000",
&nbsp; &nbsp; "updated_datetime": "2024-01-09T14:39:53.757000",
&nbsp; &nbsp; "updated_by": "breanna@swiftly.com"
}</pre>
</div>
</div>
<h2 id=3D"TaxonomyAPI-graph-list">graph-list</h2>
<p>List all graphs</p>
<h3 id=3D"TaxonomyAPI-Request.1">Request</h3>
<p>GET api/taxonomy/graph/list</p>
<p>Params: None</p>
<h3 id=3D"TaxonomyAPI-Response">Response</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">[
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; "graph_id": 13,
&nbsp; &nbsp; &nbsp; &nbsp; "topology_id": 1,
&nbsp; &nbsp; &nbsp; &nbsp; "name": "dierberg navigation",
&nbsp; &nbsp; &nbsp; &nbsp; "notes": "Dierberg",
&nbsp; &nbsp; &nbsp; &nbsp; "root_node_id": "C69B2D7C-534C-45AE-90CC-B379E3=
3C1D27",
&nbsp; &nbsp; &nbsp; &nbsp; "inserted_datetime": "2023-12-19T20:16:15.77700=
0",
&nbsp; &nbsp; &nbsp; &nbsp; "updated_datetime": "2023-12-19T20:16:15.777000=
",
&nbsp; &nbsp; &nbsp; &nbsp; "updated_by": "breanna@swiftly.com"
&nbsp; &nbsp; },
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; "graph_id": 22,
&nbsp; &nbsp; &nbsp; &nbsp; "topology_id": 1,
&nbsp; &nbsp; &nbsp; &nbsp; "name": "swiftly standard navigation",
&nbsp; &nbsp; &nbsp; &nbsp; "notes": "A standard navigation taxonomy for sw=
iflty clients",
&nbsp; &nbsp; &nbsp; &nbsp; "root_node_id": "6A337D57-929C-4C21-B898-4EEF05=
9F7D7D",
&nbsp; &nbsp; &nbsp; &nbsp; "inserted_datetime": "2023-12-19T20:29:35.61700=
0",
&nbsp; &nbsp; &nbsp; &nbsp; "updated_datetime": "2023-12-19T20:29:35.617000=
",
&nbsp; &nbsp; &nbsp; &nbsp; "updated_by": "breanna@swiftly.com"
&nbsp; &nbsp; }
]</pre>
</div>
</div>
<h2 id=3D"TaxonomyAPI-graph-get">graph-get</h2>
<p>Get graph header info by id</p>
<h3 id=3D"TaxonomyAPI-Request.2">Request</h3>
<p>GET /api/taxonomy/graph/get?graph_id=3D{graph_id}</p>
<p>Example: /api/taxonomy/graph/get?graph_id=3D28</p>
<h3 id=3D"TaxonomyAPI-Parameters">Parameters</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"25=
553db8-b8bc-4915-b059-cd3c12b1fbbb" class=3D"confluenceTable">
<tbody>
<tr>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Parameter</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Type</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Description</strong></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>graph_id</p></td>
<td class=3D"confluenceTd">
<p>Integer</p></td>
<td class=3D"confluenceTd">
<p>id of graph</p></td>
</tr>
</tbody>
</table>
</div>
<p>&nbsp;Response</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{
&nbsp; &nbsp; "graph_id": 28,
&nbsp; &nbsp; "topology_id": 1,
&nbsp; &nbsp; "name": "swiftly_classification",
&nbsp; &nbsp; "notes": "Swiftly Product Classification",
&nbsp; &nbsp; "root_node_id": "50C29661-9B26-4221-BC7D-867706FEAE25",
&nbsp; &nbsp; "inserted_datetime": "2024-01-08T17:27:23.107000",
&nbsp; &nbsp; "updated_datetime": "2024-01-08T17:27:23.107000",
&nbsp; &nbsp; "updated_by": "breanna@swiftly.com"
}</pre>
</div>
</div>
<p>&nbsp;</p>
<h2 id=3D"TaxonomyAPI-graph-update">graph-update</h2>
<p>Change the name or notes of a graph record</p>
<h3 id=3D"TaxonomyAPI-Request.3">Request</h3>
<p>POST /api/taxonomy/graph/update</p>
<p>Body &nbsp; &nbsp;</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{
&nbsp; &nbsp; "graph_id": 26,
&nbsp; &nbsp; "name": "colors",
&nbsp; &nbsp; "notes": "example graph",
&nbsp; &nbsp; "updated_by": "breanna@swiftly.com"
}&nbsp;&nbsp;</pre>
</div>
</div>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"8d=
75d4e7-0c12-4b10-a046-1b4d159f39e2" class=3D"confluenceTable">
<colgroup>
<col style=3D"width: 142.0px;">
<col style=3D"width: 98.0px;">
<col style=3D"width: 119.0px;">
<col style=3D"width: 397.0px;">
</colgroup>
<tbody>
<tr>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Field</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Type</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Required</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Description</strong></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>graph_id</p></td>
<td class=3D"confluenceTd">
<p>Integer</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>id of the graph</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>name</p></td>
<td class=3D"confluenceTd">
<p>String</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>name of the graph</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>notes</p></td>
<td class=3D"confluenceTd">
<p>String</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>description of the graph</p></td>
</tr>
</tbody>
</table>
</div>
<h3 id=3D"TaxonomyAPI-Response.1">Response</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{
&nbsp; &nbsp; "graph_id": 26,
&nbsp; &nbsp; "topology_id": 1,
&nbsp; &nbsp; "name": "colors",
&nbsp; &nbsp; "notes": "example graph",
&nbsp; &nbsp; "root_node_id": "8FB49972-115B-42C6-8C7C-3C770012CBEF",
&nbsp; &nbsp; "inserted_datetime": "2024-01-03T14:34:46.620000",
&nbsp; &nbsp; "updated_datetime": "2024-01-09T15:34:05.760000",
&nbsp; &nbsp; "updated_by": "breanna@swiftly.com"
}</pre>
</div>
</div>
<h2 id=3D"TaxonomyAPI-graph-delete">graph-delete</h2>
<p>Delete a graph, all nodes and links (from and to)</p>
<p>This will totally, permanently delete a graph and all it's constituent p=
arts!</p>
<p>Unless! you pass =E2=80=9Ctruncate=E2=80=9D which will leave the graph a=
nd the root-id in place. This is primarily useful to allow re-import of a g=
raph with the same graph_id.</p>
<h3 id=3D"TaxonomyAPI-Request.4">Request</h3>
<p>DELETE /api/taxonomy/graph/delete</p>
<p>Body:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{
&nbsp; &nbsp; "graph_id": 23
}</pre>
</div>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{
&nbsp; &nbsp; "graph_id": 23,
    "truncate": true
}</pre>
</div>
</div>
<h3 id=3D"TaxonomyAPI-Response.2">&nbsp;Response</h3>
<p>Code 200, 404, 500 no json.</p>
<h2 id=3D"TaxonomyAPI-graph-import">graph-import</h2>
<p>Import a whole graph (header, links and nodes In a single pass).&nbsp; A=
lso supports multi-pass imports where the graph is too large to do in a sin=
gle call.</p>
<p>While it is possible, and in some cases practical, to import a graph, no=
des and links in separate steps with other methods documented here, this ca=
ll wraps up all three steps into one call which is most convenient for impo=
rtation of modest-size graphs of up to than 1000 nodes.</p>
<h3 id=3D"TaxonomyAPI-Request.5">Request</h3>
<p>POST /api/taxonomy/graph/import</p>
<h3 id=3D"TaxonomyAPI-JSONfields">JSON fields</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"b4=
992d38-4ea2-4170-8987-3b826ad3d941" class=3D"confluenceTable">
<colgroup>
<col style=3D"width: 173.0px;">
<col style=3D"width: 87.0px;">
<col style=3D"width: 102.0px;">
<col style=3D"width: 394.0px;">
</colgroup>
<tbody>
<tr>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Field</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Type</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Required</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Description</strong></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>updated_by</p></td>
<td class=3D"confluenceTd">
<p>String</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>will be added to all objects imported</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>default_link_type_id</p></td>
<td class=3D"confluenceTd">
<p>Integer</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>Defaults to 1 (Hierarchical) when applied to root.&nbsp; Note: link_type=
_id can be specified for each link</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>overwrite</p></td>
<td class=3D"confluenceTd">
<p>bool</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>If true, you must provide graph_id. This will truncate the graph down to=
 the graph object and root node and re-import the graph with the same graph=
_id</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>graph</p></td>
<td class=3D"confluenceTd">
<p>Graph</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>defines at least the name of the graph.</p>
<p>If graph_id is specified, this function will allow adding additional nod=
es and links to an existing graph.</p>
<p>If graph_id is not specified, a new graph will be created and all nodes =
and links will belong to the new graph.</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>nodes</p></td>
<td class=3D"confluenceTd">
<p>List: Node</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>List of nodes to be added</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>links</p></td>
<td class=3D"confluenceTd">
<p>List: Link</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>Links that connect all nodes to the graph (using source_id as the linkag=
e)</p></td>
</tr>
</tbody>
</table>
</div>
<h4 id=3D"TaxonomyAPI-Example:">&nbsp;Example:</h4>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{
&nbsp; &nbsp; "updated_by": "breanna@swiftly.com",
&nbsp; &nbsp; "default_link_type_id": 1,
&nbsp; &nbsp; "graph": {
&nbsp; &nbsp; &nbsp; &nbsp; "topology_id": 1,
&nbsp; &nbsp; &nbsp; &nbsp; "name": "colors",
&nbsp; &nbsp; &nbsp; &nbsp; "notes": "test import"
&nbsp; &nbsp; },
&nbsp; &nbsp; "nodes": [
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; { "name": "red",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "source_id": "RED",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "notes": "a red color"
&nbsp; &nbsp; &nbsp; &nbsp; },
&nbsp; &nbsp; &nbsp; &nbsp; { "name": "green",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "source_id": "GREEN",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "notes": "a green color"
&nbsp; &nbsp; &nbsp; &nbsp; },
&nbsp; &nbsp; &nbsp; &nbsp; { "name": "blue",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "source_id": "BLUE",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "notes": "a color on the short end of th=
e visible spectrum"
&nbsp; &nbsp; &nbsp; &nbsp; },
&nbsp; &nbsp; &nbsp; &nbsp; { "name": "yellow",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "source_id": "YELLOW",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "notes": "equal mix of red and green"
&nbsp; &nbsp; &nbsp; &nbsp; },
&nbsp; &nbsp; &nbsp; &nbsp; { "name": "green-blue",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "source_id": "GREEN_BLUE",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "notes": "a mix of green and blue"
&nbsp; &nbsp; &nbsp; &nbsp; },
&nbsp; &nbsp; &nbsp; &nbsp; { "name": "light-green",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "source_id": "LIGHT_GREEN",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "notes": "green with white mixed in"
&nbsp; &nbsp; &nbsp; &nbsp; },
&nbsp; &nbsp; &nbsp; &nbsp; { "name": "purple",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "source_id": "PURPLE",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "notes": "a mix of red and blue"
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; ],
&nbsp; &nbsp; "links": [
&nbsp; &nbsp; &nbsp; &nbsp; { "from_source_id": "$ROOT$", "to_source_id": "=
RED"},
&nbsp; &nbsp; &nbsp; &nbsp; { "from_source_id": "$ROOT$", "to_source_id": "=
GREEN"},
&nbsp; &nbsp; &nbsp; &nbsp; { "from_source_id": "$ROOT$", "to_source_id": "=
BLUE"},
&nbsp; &nbsp; &nbsp; &nbsp; { "from_source_id": "RED", "to_source_id": "YEL=
LOW"},
&nbsp; &nbsp; &nbsp; &nbsp; { "from_source_id": "RED", "to_source_id": "PUR=
PLE"},
&nbsp; &nbsp; &nbsp; &nbsp; { "from_source_id": "GREEN", "to_source_id": "Y=
ELLOW"},
&nbsp; &nbsp; &nbsp; &nbsp; { "from_source_id": "GREEN", "to_source_id": "G=
REEN_BLUE"},
&nbsp; &nbsp; &nbsp; &nbsp; { "from_source_id": "GREEN", "to_source_id": "L=
IGHT_GREEN"},
&nbsp; &nbsp; &nbsp; &nbsp; { "from_source_id": "BLUE", "to_source_id": "GR=
EEN_BLUE"},
&nbsp; &nbsp; &nbsp; &nbsp; { "from_source_id": "BLUE", "to_source_id": "PU=
RPLE"}
&nbsp; &nbsp; ]
}</pre>
</div>
</div>
<p>&nbsp;Response</p>
<p>200, 500</p>
<h3 id=3D"TaxonomyAPI-Graph:">&nbsp;Graph:</h3>
<p>See Graph-create above.</p>
<p>If graph_id is specified explicitly, this can be used to add further nod=
es and links to an already started graph.&nbsp; This may be necessary for l=
arge graphs (&gt; 1000 nodes/links)</p>
<p>Normally only name and notes and possibly topology_id are specified.</p>
<h3 id=3D"TaxonomyAPI-Nodes:">Nodes:</h3>
<p>See Node-create. Requires source-id to be set. Source_id must be unique =
for the graph.</p>
<h3 id=3D"TaxonomyAPI-Links:">Links:</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"60=
1a8a98-31ae-46f7-9e04-a89afacf7bf1" class=3D"confluenceTable">
<colgroup>
<col style=3D"width: 180.0px;">
<col style=3D"width: 98.0px;">
<col style=3D"width: 109.0px;">
<col style=3D"width: 369.0px;">
</colgroup>
<tbody>
<tr>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Field</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Type</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Required</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Description</strong></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>from_source_id</p></td>
<td class=3D"confluenceTd">
<p>String</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>source_id of originating node</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>to_source_id</p></td>
<td class=3D"confluenceTd">
<p>String</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>source_id of destination node</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>link_type_id</p></td>
<td class=3D"confluenceTd">
<p>Integer</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>to specify the link_type_id if not the default_link_type_id specified at=
 the root.</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>metadata</p></td>
<td class=3D"confluenceTd">
<p>String (JSON)</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>If metadata desired for node</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>link_order</p></td>
<td class=3D"confluenceTd">
<p>integer</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>to specify order relative to originating node.</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>valid_from_datetime</p></td>
<td class=3D"confluenceTd">
<p>datetime</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>to set starting datetime for link validity</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>valid_until_datetime</p></td>
<td class=3D"confluenceTd">
<p>datetime</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>to set ending datetime for link validity (exclusive)</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>is _disabled</p></td>
<td class=3D"confluenceTd">
<p>Integer</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>1: link is disabled</p></td>
</tr>
</tbody>
</table>
</div>
<p>&nbsp;Note:&nbsp; the link fields <em>from_graph_id</em> and <em>to_grap=
h_id</em> are automatically populated with the graph_id of the newly create=
d graph.</p>
<h3 id=3D"TaxonomyAPI-SeeAlso">See Also</h3>
<p>graph-clone</p>
<p>graph-export</p>
<h2 id=3D"TaxonomyAPI-graph-clone">graph-clone</h2>
<p>Copy a graph, it=E2=80=99s nodes and links.</p>
<p>Note: This will also copy all of the inbound and outbound Related links =
that connect the original graph to other graphs in the database.</p>
<h3 id=3D"TaxonomyAPI-Request.6">Request</h3>
<p>POST /api/taxonomy/graph/clone</p>
<p>Body</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">&nbsp; =
&nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; "source_graph_id": 26,
&nbsp; &nbsp; &nbsp; &nbsp; "clone_link_type_id": 6,
&nbsp; &nbsp; &nbsp; &nbsp; "clone_related_link_type_ids": [ 3 ],
&nbsp; &nbsp; &nbsp; &nbsp; "graph": {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "name": "Colors clone 2",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "notes": "Cloned colors for batch=
 update tests",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "topology_id": 1,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "updated_by": "breanna@swiftly.co=
m"
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}
&nbsp; &nbsp; }</pre>
</div>
</div>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"b6=
f263d5-4f1c-4307-b9a5-5d6cedbcc82e" class=3D"confluenceTable">
<colgroup>
<col style=3D"width: 213.0px;">
<col style=3D"width: 120.0px;">
<col style=3D"width: 85.0px;">
<col style=3D"width: 338.0px;">
</colgroup>
<tbody>
<tr>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Field</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Type</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Required</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Description</strong></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>source_graph_id</p></td>
<td class=3D"confluenceTd">
<p>Integer</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>Source graph to clone</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>clone_link_type_id</p></td>
<td class=3D"confluenceTd">
<p>Integer</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>If present, then links of this type will be created from the original no=
de to the cloned node. If not present, then no =E2=80=9Cclone-links=E2=80=
=9D will be created.</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>clone_related_link_type_ids</p></td>
<td class=3D"confluenceTd">
<p>Array[Integer]</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>An array of related link type ids which should be cloned. This allow sel=
ection of which related type links from the original graph should be cloned=
.</p>
<p>Specify [ 3 ] will clone all Related type links.</p>
<p>The service logic will expand a link type that has child link-types defi=
ned.</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>graph</p></td>
<td class=3D"confluenceTd">
<p>Graph</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>This is the contents of the graph record for the cloned graph. See graph=
-create above.</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>overwrite</p></td>
<td class=3D"confluenceTd">
<p>boolean</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>If overwrite field exists and is set to true, then the graph_id of the g=
raph object must be filled in with the id of an exsiting graph to clone int=
o. The graph will be truncated down to the graph object and the root node a=
nd then re-cloned over.</p>
<p>This is used when maintaining the same graph_id is important as for cate=
gory graphs for tenants.</p></td>
</tr>
</tbody>
</table>
</div>
<h2 id=3D"TaxonomyAPI-graph-batch">graph-batch</h2>
<p>graph-batch allows a full range of modifying operations to be performed =
on a graph in a single call. The graph must already exist for graph-batch a=
s it does not support creation of the graph in the first place. See graph-i=
mport for creating a graph in a single call.</p>
<p>Graph-batch can execute the output from graph-diff</p>
<h3 id=3D"TaxonomyAPI-Request.7">Request</h3>
<p>POST /api/taxonomy/graph/batch</p>
<h3 id=3D"TaxonomyAPI-Body">Body</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{
  "default_link_id": 1,
  "updated_by": "breanna@swiftly.com",
  "graph": {
    "graph_id": 46
  },
  "nodes": [
    {
      "action": "NEW",
      "node": {
        "source_id": "BEIGE",
        "name": "beige",
        "notes": "color of a suburban living room",
        "metadata": "{\"primary\":0}"
      }
    },
    {
      "action": "UPDATE",
      "node": {
        "node_id": "5305B7AE-B545-4E90-BF7C-4549386F717A",
        "node_type_id": 0,
        "graph_id": 46,
        "source_id": "TRUE_RED",
        "name": "red",
        "notes": "The real red color",
        "metadata": "{\"primary\":1}"
      }
    },
    {
      "action": "DELETE",
      "node": {
        "source_id": "BLACK"
      }
    },
    {
      "action": "MERGE",
      "merge": {
        "from_node": {
          "source_id": "ROUGE"
        },
        "to_node": {
          "source_id": "TRUE_RED"
        }
      }
    },
    {
      "action": "SPLIT",
      "split": {
        "from_node": {
          "source_id": "BLUE"
        },
        "to_node": {
          "source_id": "AZURE",
          "name": "azure",
          "notes": "sky blue"
        }
      }
    }
  ],
  "links": [
    {
      "action": "NEW",
      "link": {
        "from_source_id": "$ROOT$",
        "to_source_id": "BEIGE"
      }
    },
    {
      "action": "UPDATE",
      "link": {
        "link_id": "479F53E2-2BFB-46F6-89E1-60AC955DE684",
        "from_source_id": "OTHER",
        "to_source_id": "GREY",
        "link_order": -1,
        "is_disabled": true
      }
    },
    {
      "action": "DELETE",
      "link": {
        "link_id": "A68A6C08-5CEF-4659-9964-66429D9E14EF"
      }
    }
  ]
}</pre>
</div>
</div>
<h3 id=3D"TaxonomyAPI-Actions">Actions</h3>
<h4 id=3D"TaxonomyAPI-Nodes">Nodes</h4>
<h5 id=3D"TaxonomyAPI-New">New</h5>
<p>Add a new node to the graph. This does not create a link so a matching N=
ew Link must also be included.</p>
<p>See node-create.</p>
<p>See SPLIT below to create a new node and also copy all of that nodes rel=
ationships to the new node.</p>
<h5 id=3D"TaxonomyAPI-Update">Update</h5>
<p>Update a node in the graph. See Node-update. This requires all updateabl=
e node attributes to be present in the data structure. Node_id must also be=
 specified to update a node. The source_id may be updated by this operation=
.</p>
<h5 id=3D"TaxonomyAPI-Delete">Delete</h5>
<p>Delete a node. Only the node_id is required for this operation. See Merg=
e below for a way to remove a node and move all relationships to a node to =
another node.</p>
<h5 id=3D"TaxonomyAPI-Merge">Merge</h5>
<p>Merge one node into another. This deletes the =E2=80=9Cfrom=E2=80=9D nod=
e and moves all of the links to the =E2=80=9Cfrom=E2=80=9D node to the =E2=
=80=9Cto=E2=80=9D node. This is often a preferrable way to remove a node fr=
om a graph in maintenance mode if the intent is to express that the two con=
cepts are in fact one. if external related links are present to the =E2=80=
=9Cfrom=E2=80=9D node, they will now be pointed to the =E2=80=9Cto=E2=80=9D=
 node.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence"> {
      "action": "MERGE",
      "merge": {
        "from_node": {
          "source_id": "ROUGE"
        },
        "to_node": {
          "source_id": "TRUE_RED"
        }
      }
    }</pre>
</div>
</div>
<p>Unlinke other Node batch operations, the body of the action is not a Nod=
e object but a special =E2=80=9Cmerge=E2=80=9D json with a =E2=80=9Cfrom_no=
de=E2=80=9D and =E2=80=9Cto_node=E2=80=9D sub-object. Either a node_id or a=
 source_id is necessary to refer to the node. If node_id is present it will=
 be used over the source_id.</p>
<p></p>
<p>See Also: Node-merge</p>
<h5 id=3D"TaxonomyAPI-Split">Split</h5>
<p>Used to split a node (concept) into two finer-grained nodes. Technically=
 , it creates a new node (to_node) and copies the inbound and outbound link=
s to the new node.</p>
<p>Note: It may be desirable to subsequently delete unwanted links to or fr=
om the from and/or to node.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{
  "action": "SPLIT",
  "split": {
    "from_node": {
      "source_id": "BLUE"
    },
    "to_node": {
      "source_id": "AZURE",
      "name": "azure",
      "notes": "sky blue"
    }
  }
}</pre>
</div>
</div>
<p>Like =E2=80=9CMERGE=E2=80=9D above, split action has a special data stru=
cture =E2=80=9Csplit=E2=80=9D to define the action.</p>
<p>The =E2=80=9Cfrom_node=E2=80=9D only requires a node_id OR a source_id.<=
/p>
<p>The =E2=80=9Cto_node=E2=80=9D requires all fields as for node-create . S=
ee node-create for more information.</p>
<p>Note: =E2=80=9Cupdated_by=E2=80=9D and =E2=80=9Cgraph_id=E2=80=9D are fi=
lled in from the outermost batch object.</p>
<p></p>
<h4 id=3D"TaxonomyAPI-Links">Links</h4>
<h5 id=3D"TaxonomyAPI-New.1">New</h5>
<p>Add a new link.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">    {
      "action": "NEW",
      "link": {
        "from_source_id": "$ROOT$",
        "to_source_id": "BEIGE"
      }
    }</pre>
</div>
</div>
<p>This requires only from_node_id and to_node_id or from_source_id and to_=
source_id.</p>
<p>Note: this cannot be used to add links between two different graphs. See=
 link-add for that.</p>
<h5 id=3D"TaxonomyAPI-Update.1">Update</h5>
<p>Update a link. This patches individual attributes of a link so only the =
updated attribute(s) must be specified</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">    {
      "action": "UPDATE",
      "link": {
        "link_id": "479F53E2-2BFB-46F6-89E1-60AC955DE684",
        "from_source_id": "OTHER",
        "to_source_id": "GREY",
        "link_order": -1,
        "is_disabled": true
      }
    }</pre>
</div>
</div>
<p>Note: the example above shows both a link_id and from_source_id and to_s=
ource_id. In reality only one or the other is necessary. If link_id is pres=
ent it will be used.</p>
<h5 id=3D"TaxonomyAPI-Delete.1">Delete</h5>
<p>Delete a link.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">    {
      "action": "DELETE",
      "link": {
        "link_id": "A68A6C08-5CEF-4659-9964-66429D9E14EF"
      }
    }</pre>
</div>
</div>
<p>the link_id is required for this action.</p>
<p>Note: Deleting a link to a node without deleting the node will make the =
node an =E2=80=9Corphan=E2=80=9D. It will still belong to the graph but not=
 be accessible by any traversal from the root. To find orphan nodes see <em=
>node-get-orphans</em>.</p>
<h3 id=3D"TaxonomyAPI-Response.3">Response</h3>
<p>Returns JSON with graph, nodes and links changed.</p>
<p>&lt;Example&gt;</p>
<h2 id=3D"TaxonomyAPI-graph-diff">graph-diff</h2>
<p>Graph-diff compares a persisted graph in the database against a json rep=
resentation of the graph. It outputs a json specification for every change =
it found between the passed json and the stored graph and what steps would =
need to be taken to make the persisted graph the same as the passed json.</=
p>
<p>Graph-diff is a companion to graph-batch in that the output of graph-dif=
f is the same format is the input to graph-batch. Graph-batch can process t=
he additional actions of node: =E2=80=9Cmerge=E2=80=9D and =E2=80=9Csplit=
=E2=80=9D which cannot be detected automatically by graph-diff however.</p>
<p>Graph-diff can take the output of graph-export as input.</p>
<p>The output of graph-diff can be edited if needed to adjust the changes a=
nd then submitted to graph-batch</p>
<p>This is useful for a range of scenarios.</p>
<ol start=3D"1">
<li>
<p>Incremental sync of a taxonomy to an external source-of-truth.</p></li>
<li>
<p>Batch oriented change management and editing of a graph</p></li>
<li>
<p>Snapshot and restore of a graph state. using graph-export.</p></li>
</ol>
<h3 id=3D"TaxonomyAPI-Request.8">Request</h3>
<p>POST /api/taxonomy/graph/diff</p>
<h3 id=3D"TaxonomyAPI-Body.1">Body</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{
&nbsp; &nbsp; "default_link_type_id": 1,
&nbsp; &nbsp; "graph": {
&nbsp; &nbsp; &nbsp; &nbsp; "graph_id": 46
&nbsp; &nbsp; },
&nbsp; &nbsp; "nodes": [
&nbsp; &nbsp; &nbsp; &nbsp;=20
&nbsp; &nbsp; &nbsp; &nbsp; { "name": "red",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "source_id": "RED",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "notes": "a red color",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "metadata": "{\"primary\": 1}"
&nbsp; &nbsp; &nbsp; &nbsp; },
&nbsp; &nbsp; &nbsp; &nbsp; { "name": "green",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "source_id": "GREEN",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "notes": "a green color",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "metadata": "{\"primary\": 1}"
&nbsp; &nbsp; &nbsp; &nbsp; },
&nbsp; &nbsp; &nbsp; &nbsp; { "name": "blue",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "source_id": "BLUE",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "notes": "a color on the short end of th=
e visible spectrum",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "metadata": "{\"primary\": 1}"
&nbsp; &nbsp; &nbsp; &nbsp; },
&nbsp; &nbsp; &nbsp; &nbsp; { "name": "yellow",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "source_id": "YELLOW",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "notes": "Yellow (green + red)",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "metadata": "{\"primary\": 0}"
&nbsp; &nbsp; &nbsp; &nbsp; },
&nbsp; &nbsp; &nbsp; &nbsp; { "name": "cyan",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "source_id": "CYAN",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "notes": "green and blue?",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "metadata": "{\"primary\": 0}"
&nbsp; &nbsp; &nbsp; &nbsp; },
&nbsp; &nbsp; &nbsp; &nbsp; { "name": "green-blue",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "source_id": "GREEN_BLUE",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "notes": "a mix of green and blue",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "metadata": "{\"primary\": 0}"
&nbsp; &nbsp; &nbsp; &nbsp; },
&nbsp; &nbsp; &nbsp; &nbsp; { "name": "light-green",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "source_id": "LIGHT_GREEN",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "notes": "green with white mixed in",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "metadata": "{\"primary\": 0}"
&nbsp; &nbsp; &nbsp; &nbsp; },
&nbsp; &nbsp; &nbsp; &nbsp; { "name": "purple",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "source_id": "PURPLE",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "notes": "a mix of red and blue",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "metadata": "{\"primary\": 0}"
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; ],
&nbsp; &nbsp; "links": [
&nbsp; &nbsp; &nbsp; &nbsp; { "from_source_id": "$ROOT$", "to_source_id": "=
RED"},
&nbsp; &nbsp; &nbsp; &nbsp; { "from_source_id": "$ROOT$", "to_source_id": "=
GREEN"},
&nbsp; &nbsp; &nbsp; &nbsp; { "from_source_id": "$ROOT$", "to_source_id": "=
BLUE"},
&nbsp; &nbsp; &nbsp; &nbsp; { "from_source_id": "RED", "to_source_id": "YEL=
LOW"},
&nbsp; &nbsp; &nbsp; &nbsp; { "from_source_id": "RED", "to_source_id": "PUR=
PLE"},
&nbsp; &nbsp; &nbsp; &nbsp; { "from_source_id": "GREEN", "to_source_id": "Y=
ELLOW"},
&nbsp; &nbsp; &nbsp; &nbsp; { "from_source_id": "GREEN", "to_source_id": "G=
REEN_BLUE"},
&nbsp; &nbsp; &nbsp; &nbsp; { "from_source_id": "GREEN", "to_source_id": "L=
IGHT_GREEN"},
&nbsp; &nbsp; &nbsp; &nbsp; { "from_source_id": "GREEN", "to_source_id": "C=
YAN"},
&nbsp; &nbsp; &nbsp; &nbsp; { "from_source_id": "BLUE", "to_source_id": "GR=
EEN_BLUE"},
&nbsp; &nbsp; &nbsp; &nbsp; { "from_source_id": "BLUE", "to_source_id": "CY=
AN"},
&nbsp; &nbsp; &nbsp; &nbsp; { "from_source_id": "BLUE", "to_source_id": "PU=
RPLE"}
&nbsp; &nbsp; ]
}</pre>
</div>
</div>
<h3 id=3D"TaxonomyAPI-Params">Params</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"c5=
00f793-e603-42da-926a-4ceecf992e57" class=3D"confluenceTable">
<colgroup>
<col style=3D"width: 173.0px;">
<col style=3D"width: 87.0px;">
<col style=3D"width: 102.0px;">
<col style=3D"width: 394.0px;">
</colgroup>
<tbody>
<tr>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Field</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Type</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Required</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Description</strong></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>default_link_type_id</p></td>
<td class=3D"confluenceTd">
<p>Integer</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>Defaults to 1 (Hierarchical) when applied to root.&nbsp; Is used to spec=
ific link type for any new links added.</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>graph</p></td>
<td class=3D"confluenceTd">
<p>Graph</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>The graph against which the json is to be compared. Only graph_id is use=
d.</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>nodes</p></td>
<td class=3D"confluenceTd">
<p>List: Node</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>List of nodes to be compared to the stored graph</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>links</p></td>
<td class=3D"confluenceTd">
<p>List: Link</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>list of links to be compared to the stored graph</p></td>
</tr>
</tbody>
</table>
</div>
<p>See graph-import for detailed description of fields for nodes and links.=
</p>
<p>Nodes and links can be minimal structures without ids as is the case for=
 graph-import but can also be fully-hydrated data structures as output by g=
raph-export. It works with both types of scenarios.</p>
<h3 id=3D"TaxonomyAPI-Response.4">Response</h3>
<p>graph-diff outputs a data structure which is the same as the specificati=
on for graph-batch except that it lacks the fields : default_link_id and up=
dated_by</p>
<p>The notable addition is that action: =E2=80=9CUPDATE=E2=80=9D objects in=
clude a =E2=80=9Cfields_changed=E2=80=9D object which documents =E2=80=9Cfi=
eld_name=E2=80=9D, =E2=80=9Corig_value=E2=80=9D and =E2=80=9Cnew_value=E2=
=80=9D for informational purposes. If this is submitted to graph-batch, the=
 =E2=80=9Cfields_changed=E2=80=9D object is ignored.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{
&nbsp; &nbsp; "graph": {
&nbsp; &nbsp; &nbsp; &nbsp; "graph_id": 46,
&nbsp; &nbsp; &nbsp; &nbsp; "topology_id": 1,
&nbsp; &nbsp; &nbsp; &nbsp; "name": "test_colors",
&nbsp; &nbsp; &nbsp; &nbsp; "notes": "test import for batch testing",
&nbsp; &nbsp; &nbsp; &nbsp; "root_node_id": "77FBCFCB-0E49-4DA8-850E-92A9F9=
EE013E",
&nbsp; &nbsp; &nbsp; &nbsp; "inserted_datetime": "2024-02-21T14:40:58.51000=
0",
&nbsp; &nbsp; &nbsp; &nbsp; "updated_datetime": "2024-02-21T14:40:58.510000=
",
&nbsp; &nbsp; &nbsp; &nbsp; "updated_by": "breanna@swiftly.com"
&nbsp; &nbsp; },
&nbsp; &nbsp; "nodes": [
&nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "action": "UPDATE",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "node": {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "name": "red",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "source_id": "RED",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "notes": "a red col=
or",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "metadata": "{\"pri=
mary\": 1}",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "node_type_id": 0,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "node_id": "5305B7A=
E-B545-4E90-BF7C-4549386F717A",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "graph_id": 46
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "fields_changed": [
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "fiel=
d_name": "notes",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "orig=
_value": "The real red color",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "new_=
value": "a red color"
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "fiel=
d_name": "metadata",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "orig=
_value": "{\"primary\":1}",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "new_=
value": "{\"primary\": 1}"
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ]
&nbsp; &nbsp; &nbsp; &nbsp; },
&nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "action": "NEW",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "node": {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "name": "cyan",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "source_id": "CYAN"=
,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "notes": "green and=
 blue?",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "metadata": "{\"pri=
mary\": 0}"
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; },
&nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "action": "DELETE",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "node": {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "node_id": "580CFA7=
A-7E7F-4C36-8A1E-0594CFE29B6A",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "node_type_id": 0,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "graph_id": 46,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "source_id": "MAGEN=
TA",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "name": "magenta",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "notes": "vibrant p=
ink color",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "metadata": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "inserted_datetime"=
: "2024-02-21T14:51:01.783000",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "updated_datetime":=
 "2024-02-21T14:51:01.783000",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "updated_by": "brea=
nna@swiftly.com"
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; ],
&nbsp; &nbsp; "links": [
&nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "action": "NEW",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "link": {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "from_source_id": "=
GREEN",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "to_source_id": "CY=
AN",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "link_type_id": 1
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; },
&nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "action": "NEW",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "link": {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "from_source_id": "=
BLUE",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "to_source_id": "CY=
AN",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "link_type_id": 1
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; },
&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "action": "DELETE",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "link": {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "link_id": "3002AA8=
7-52C8-406E-802B-61CF315A6FE5",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "link_type_id": 1,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "from_graph_id": 46=
,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "from_node_id": "BA=
59648E-3C26-4C37-B0F1-A9E677E33D9B",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "from_source_id": "=
BLUE",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "to_graph_id": 46,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "to_node_id": "580C=
FA7A-7E7F-4C36-8A1E-0594CFE29B6A",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "to_source_id": "MA=
GENTA",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "link_order": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "metadata": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "valid_from_datetim=
e": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "valid_until_dateti=
me": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "is_disabled": null
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; ]
}</pre>
</div>
</div>
<h3 id=3D"TaxonomyAPI-Seealso">See also</h3>
<p>Graph-import</p>
<p>Graph-batch</p>
<p>Graph-export</p>
<h2 id=3D"TaxonomyAPI-graph-export">graph-export</h2>
<h3 id=3D"TaxonomyAPI-Request.9">Request</h3>
<p>GET /api/taxonomy/graph/export?graph_id=3D{graph_id}</p>
<h3 id=3D"TaxonomyAPI-Params.1">Params</h3>
<p>graph_id - the identifier of the graph to be exported</p>
<h3 id=3D"TaxonomyAPI-Response.5">Response</h3>
<p></p>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"4e=
5e26fd-bbf7-4d6a-9bbd-915a72e1266d" class=3D"confluenceTable">
<colgroup>
<col style=3D"width: 173.0px;">
<col style=3D"width: 87.0px;">
<col style=3D"width: 102.0px;">
<col style=3D"width: 394.0px;">
</colgroup>
<tbody>
<tr>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Field</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Type</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Required</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Description</strong></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>graph</p></td>
<td class=3D"confluenceTd">
<p>Graph</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>The graph object</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>nodes</p></td>
<td class=3D"confluenceTd">
<p>List: Node</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>List of fully hydrated node objects</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>links</p></td>
<td class=3D"confluenceTd">
<p>List: Link</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>list of fully hydrated link objects. Note: only includes links from and =
to the current graph.</p></td>
</tr>
</tbody>
</table>
</div>
<p>Example</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{
&nbsp; &nbsp; "graph": {
&nbsp; &nbsp; &nbsp; &nbsp; "graph_id": 26,
&nbsp; &nbsp; &nbsp; &nbsp; "topology_id": 1,
&nbsp; &nbsp; &nbsp; &nbsp; "name": "colors",
&nbsp; &nbsp; &nbsp; &nbsp; "notes": "example graph",
&nbsp; &nbsp; &nbsp; &nbsp; "root_node_id": "8FB49972-115B-42C6-8C7C-3C7700=
12CBEF",
&nbsp; &nbsp; &nbsp; &nbsp; "inserted_datetime": "2024-01-03T14:34:46.62000=
0",
&nbsp; &nbsp; &nbsp; &nbsp; "updated_datetime": "2024-01-09T15:34:05.760000=
",
&nbsp; &nbsp; &nbsp; &nbsp; "updated_by": "breanna@swiftly.com"
&nbsp; &nbsp; },
&nbsp; &nbsp; "nodes": [
&nbsp; &nbsp;&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "node_id": "9F4ECA30-AA7C-42B8-A2=
7C-2BA451068BCE",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "node_type_id": 0,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "graph_id": 26,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "source_id": "YELLOW",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "name": "yellow",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "notes": "equal mix of red and gr=
een",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "metadata": "{\"primary\": 0}",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "inserted_datetime": "2024-01-03T=
14:35:55.813000",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "updated_datetime": "2024-01-03T1=
4:35:55.813000",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "updated_by": "breanna@swiftly.co=
m"
&nbsp; &nbsp; &nbsp; &nbsp; },
&nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "node_id": "AF626586-B846-4455-8C=
19-342A1F22870C",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "node_type_id": 0,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "graph_id": 26,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "source_id": "RED",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "name": "red",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "notes": "a red color",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "metadata": "{\"primary\": 1}",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "inserted_datetime": "2024-01-03T=
14:35:55.813000",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "updated_datetime": "2024-01-03T1=
4:35:55.813000",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "updated_by": "breanna@swiftly.co=
m"
&nbsp; &nbsp; &nbsp; &nbsp; },
&nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "node_id": "4F4BCEA7-F2F6-4FE3-86=
50-49589C7F0C18",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "node_type_id": 0,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "graph_id": 26,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "source_id": "GREEN",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "name": "green",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "notes": "a green color",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "metadata": "{\"primary\": 1}",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "inserted_datetime": "2024-01-03T=
14:35:55.813000",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "updated_datetime": "2024-01-03T1=
4:35:55.813000",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "updated_by": "breanna@swiftly.co=
m"
&nbsp; &nbsp; &nbsp; &nbsp; },
&nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "node_id": "05BD3561-161E-4E19-A9=
EB-68515CA268B9",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "node_type_id": 0,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "graph_id": 26,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "source_id": "LIGHT_GREEN",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "name": "light-green",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "notes": "green with white mixed =
in",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "metadata": "{\"primary\": 0}",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "inserted_datetime": "2024-01-03T=
14:35:55.813000",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "updated_datetime": "2024-01-03T1=
4:35:55.813000",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "updated_by": "breanna@swiftly.co=
m"
&nbsp; &nbsp; &nbsp; &nbsp; },
&nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "node_id": "9E400BC9-9257-4066-BA=
BC-B157B0A8695F",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "node_type_id": 0,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "graph_id": 26,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "source_id": "GREEN_BLUE",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "name": "green-blue",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "notes": "a mix of green and blue=
",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "metadata": "{\"primary\": 0}",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "inserted_datetime": "2024-01-03T=
14:35:55.813000",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "updated_datetime": "2024-01-03T1=
4:35:55.813000",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "updated_by": "breanna@swiftly.co=
m"
&nbsp; &nbsp; &nbsp; &nbsp; },
&nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "node_id": "B35F2EBE-2C72-4E2D-9F=
E3-B907CD025572",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "node_type_id": 0,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "graph_id": 26,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "source_id": "BLUE",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "name": "blue",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "notes": "a color on the short en=
d of the visible spectrum",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "metadata": "{\"primary\": 1}",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "inserted_datetime": "2024-01-03T=
14:35:55.813000",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "updated_datetime": "2024-01-03T1=
4:35:55.813000",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "updated_by": null
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; ],
&nbsp; &nbsp; "links": [
&nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "link_id": "36529865-459A-4366-96=
D3-17BDBB09E6AF",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "link_type_id": 1,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "from_graph_id": 26,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "from_node_id": "8FB49972-115B-42=
C6-8C7C-3C770012CBEF",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "from_source_id": "$ROOT$",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "to_graph_id": 26,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "to_node_id": "4F4BCEA7-F2F6-4FE3=
-8650-49589C7F0C18",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "to_source_id": "GREEN",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "link_order": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "metadata": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "valid_from_datetime": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "valid_until_datetime": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "is_disabled": null
&nbsp; &nbsp; &nbsp; &nbsp; },
&nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "link_id": "25DFF3D0-311F-4BEF-88=
20-A314470AA053",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "link_type_id": 1,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "from_graph_id": 26,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "from_node_id": "8FB49972-115B-42=
C6-8C7C-3C770012CBEF",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "from_source_id": "$ROOT$",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "to_graph_id": 26,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "to_node_id": "B35F2EBE-2C72-4E2D=
-9FE3-B907CD025572",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "to_source_id": "BLUE",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "link_order": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "metadata": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "valid_from_datetime": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "valid_until_datetime": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "is_disabled": null
&nbsp; &nbsp; &nbsp; &nbsp; },
&nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "link_id": "58B87D46-61BE-4717-9A=
77-DF0FEB8D500F",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "link_type_id": 1,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "from_graph_id": 26,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "from_node_id": "8FB49972-115B-42=
C6-8C7C-3C770012CBEF",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "from_source_id": "$ROOT$",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "to_graph_id": 26,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "to_node_id": "AF626586-B846-4455=
-8C19-342A1F22870C",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "to_source_id": "RED",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "link_order": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "metadata": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "valid_from_datetime": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "valid_until_datetime": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "is_disabled": false
&nbsp; &nbsp; &nbsp; &nbsp; },
&nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "link_id": "E36F6C78-667C-4073-BB=
08-DF80464A764D",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "link_type_id": 1,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "from_graph_id": 26,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "from_node_id": "AF626586-B846-44=
55-8C19-342A1F22870C",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "from_source_id": "RED",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "to_graph_id": 26,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "to_node_id": "9F4ECA30-AA7C-42B8=
-A27C-2BA451068BCE",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "to_source_id": "YELLOW",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "link_order": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "metadata": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "valid_from_datetime": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "valid_until_datetime": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "is_disabled": null
&nbsp; &nbsp; &nbsp; &nbsp; },
&nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "link_id": "8A119141-A460-4976-9C=
65-94A0517E55BC",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "link_type_id": 1,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "from_graph_id": 26,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "from_node_id": "B35F2EBE-2C72-4E=
2D-9FE3-B907CD025572",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "from_source_id": "BLUE",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "to_graph_id": 26,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "to_node_id": "9E400BC9-9257-4066=
-BABC-B157B0A8695F",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "to_source_id": "GREEN_BLUE",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "link_order": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "metadata": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "valid_from_datetime": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "valid_until_datetime": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "is_disabled": null
&nbsp; &nbsp; &nbsp; &nbsp; },
&nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "link_id": "AE85F497-35F9-47A6-9B=
71-0CCA58F99AC3",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "link_type_id": 1,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "from_graph_id": 26,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "from_node_id": "4F4BCEA7-F2F6-4F=
E3-8650-49589C7F0C18",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "from_source_id": "GREEN",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "to_graph_id": 26,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "to_node_id": "05BD3561-161E-4E19=
-A9EB-68515CA268B9",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "to_source_id": "LIGHT_GREEN",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "link_order": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "metadata": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "valid_from_datetime": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "valid_until_datetime": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "is_disabled": null
&nbsp; &nbsp; &nbsp; &nbsp; },
&nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "link_id": "3E3686E0-E9FD-44EF-80=
BA-7CEB8C292D20",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "link_type_id": 1,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "from_graph_id": 26,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "from_node_id": "4F4BCEA7-F2F6-4F=
E3-8650-49589C7F0C18",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "from_source_id": "GREEN",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "to_graph_id": 26,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "to_node_id": "9E400BC9-9257-4066=
-BABC-B157B0A8695F",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "to_source_id": "GREEN_BLUE",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "link_order": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "metadata": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "valid_from_datetime": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "valid_until_datetime": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "is_disabled": null
&nbsp; &nbsp; &nbsp; &nbsp; },
&nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "link_id": "54C305B2-9DDA-40AF-A5=
BA-97984E51944F",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "link_type_id": 1,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "from_graph_id": 26,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "from_node_id": "4F4BCEA7-F2F6-4F=
E3-8650-49589C7F0C18",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "from_source_id": "GREEN",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "to_graph_id": 26,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "to_node_id": "9F4ECA30-AA7C-42B8=
-A27C-2BA451068BCE",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "to_source_id": "YELLOW",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "link_order": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "metadata": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "valid_from_datetime": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "valid_until_datetime": null,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "is_disabled": null
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; ]
}</pre>
</div>
</div>
<h3 id=3D"TaxonomyAPI-Seealso.1">See also</h3>
<p>Graph-import</p>
<p>Graph-diff</p>
<h2 id=3D"TaxonomyAPI-graph-query">graph-query</h2>
<p>graph-query permits retrieval of graph data by way of node queries and t=
raversals of links. It is fairly advanced and can be used to address both s=
imple an complex scenarios:</p>
<ul>
<li>
<p>Get node parent</p></li>
<li>
<p>get node ancestors (all)</p></li>
<li>
<p>get node children</p></li>
<li>
<p>get node descendents (children and all their children recursive)</p></li=
>
<li>
<p>get related nodes from another graph</p></li>
<li>
<p>get all nodes from another graph directly connected to a node or all anc=
estor nodes (inherited linkages)</p></li>
<li>
<p>and many more=E2=80=A6</p></li>
</ul>
<p></p>
<p>Please see the <a href=3D"https://swiftlysystems.atlassian.net/wiki/x/e4=
ALCQ" rel=3D"nofollow">Graph Query Developer Guide</a> document for a more =
in-depth coverage.</p>
<h3 id=3D"TaxonomyAPI-Request.10">Request</h3>
<p>POST /api/taxonomy/graph/query</p>
<h3 id=3D"TaxonomyAPI-Body.2">Body</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"b6=
01a897-bc63-4027-adbd-e1a79440ddf4" class=3D"confluenceTable">
<colgroup>
<col style=3D"width: 162.0px;">
<col style=3D"width: 98.0px;">
<col style=3D"width: 102.0px;">
<col style=3D"width: 394.0px;">
</colgroup>
<tbody>
<tr>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Field</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Type</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Required</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Description</strong></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>graph_id</p></td>
<td class=3D"confluenceTd">
<p>int</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>the graph to query</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>seed</p></td>
<td class=3D"confluenceTd">
<p>Seed</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>A Node query - see node-query. If not specified, the Root node of the gr=
aph is the seed node. The seed query may return multiple nodes which all wi=
ll be used as starting points for subsequent link traversal steps.</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>steps</p></td>
<td class=3D"confluenceTd">
<p>Array[Step]</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>One or more step of link traversals. This is optional. If not specified,=
 the default step is to traverse FROM the seed nodes(s) hierarchical links =
with no depth limit. (full graph traversal)</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>return</p></td>
<td class=3D"confluenceTd">
<p>Return</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>Type of data to return. Default: type: =E2=80=9C*=E2=80=9D, a denormaliz=
ed link with most from and to node data included.</p></td>
</tr>
</tbody>
</table>
</div>
<h3 id=3D"TaxonomyAPI-Step">Step</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"28=
ff082a-b961-4d64-be2f-d100b309aa76" class=3D"confluenceTable">
<colgroup>
<col style=3D"width: 175.0px;">
<col style=3D"width: 87.0px;">
<col style=3D"width: 102.0px;">
<col style=3D"width: 396.0px;">
</colgroup>
<tbody>
<tr>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Field</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Type</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Required</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Description</strong></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>dir</p></td>
<td class=3D"confluenceTd">
<p>String</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>FROM, TO (Default FROM).</p>
<p>FROM - follow linkd From the seed nodes or subsequent nodes,</p>
<p>TO - follow links from head to tail to Parent nodes.</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>depth</p></td>
<td class=3D"confluenceTd">
<p>Integer</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>Default: no depth limit.</p>
<p>The number of recursive steps to return results from.</p>
<p>Examples:</p>
<p>FROM, depth:1 would get only direct children.</p>
<p>depth: 2 would return children and grand-children.</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>link_types</p></td>
<td class=3D"confluenceTd">
<p>List: Int</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>list of types of links to follow.</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>graph_ids</p></td>
<td class=3D"confluenceTd">
<p>List: Int</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>List of graphs that can be traversed to. Default origin graph_id only Ex=
plicitly passing an empty list [] means =E2=80=9Call graphs=E2=80=9D</p></t=
d>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>link_seed</p></td>
<td class=3D"confluenceTd">
<p>boolean</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>Default: True for step1, False for subsequent steps.</p>
<p>This is only relevant for multi-step queries. The first step always star=
ts from seed nodes. This is helpful in multi-step queries.</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>include_results</p></td>
<td class=3D"confluenceTd">
<p>boolean</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>Default: True for last step, False for any previous steps. Include the n=
odes from this step in the output result.</p>
<p>Normally, only the results of the final step are included in the results=
. For multi-step queries, set to True for all steps for which results are t=
o be returned.</p></td>
</tr>
</tbody>
</table>
</div>
<h3 id=3D"TaxonomyAPI-Return">Return</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"22=
d42ceb-d67d-4abe-9566-66db3ff822d0" class=3D"confluenceTable">
<colgroup>
<col style=3D"width: 175.0px;">
<col style=3D"width: 87.0px;">
<col style=3D"width: 102.0px;">
<col style=3D"width: 396.0px;">
</colgroup>
<tbody>
<tr>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Field</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Type</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Required</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Description</strong></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>type</p></td>
<td class=3D"confluenceTd">
<p>String</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>*, NODE, LINK</p>
<p>=E2=80=9C*=E2=80=9D - return a denormalized link with from and to node d=
ata plus fields =E2=80=9Cdepth=E2=80=9D, =E2=80=9Cdirection=E2=80=9D</p>
<p>NODE - return a distinct list of Node objects.</p>
<p>LINK - return conformant Link objects</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>include_seed</p></td>
<td class=3D"confluenceTd">
<p>Boolean</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>Default: false</p>
<p>Applies only to type:NODE returns. Include the seed nodes in the result.=
</p>
<p></p></td>
</tr>
</tbody>
</table>
</div>
<h3 id=3D"TaxonomyAPI-Response.6">Response</h3>
<p>Type =E2=80=9C*=E2=80=9D</p>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"11=
9b2de3-6950-4d46-8d45-62b3d161f5dd" class=3D"confluenceTable">
<colgroup>
<col style=3D"width: 203.0px;">
<col style=3D"width: 100.0px;">
<col style=3D"width: 457.0px;">
</colgroup>
<tbody>
<tr>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Field</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Type</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Description</strong></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>depth</p></td>
<td class=3D"confluenceTd">
<p>Integer</p></td>
<td class=3D"confluenceTd">
<p>link-traversals away from the seed nodes. Starts at 1.</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>direction</p></td>
<td class=3D"confluenceTd">
<p>String</p></td>
<td class=3D"confluenceTd">
<p>=E2=80=9CFROM=E2=80=9D OR =E2=80=9CTO=E2=80=9D.</p>
<p>FROM: means the link was traversed from node to to_node</p>
<p>TO: means that the link was traversed in reverse direction starting at t=
he TO node.</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>step</p></td>
<td class=3D"confluenceTd">
<p>integer</p></td>
<td class=3D"confluenceTd">
<p>Which Step (in multi-step query) as this data from (starting with 1)</p>=
</td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>link_order</p></td>
<td class=3D"confluenceTd">
<p>integer</p></td>
<td class=3D"confluenceTd">
<p>order of the link relative to parent if set</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>link_type_id</p></td>
<td class=3D"confluenceTd">
<p>integer</p></td>
<td class=3D"confluenceTd">
<p>type of link</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>link_metadata</p></td>
<td class=3D"confluenceTd">
<p>String</p></td>
<td class=3D"confluenceTd">
<p>JSON metadata for link</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>valid_from_datetime</p></td>
<td class=3D"confluenceTd">
<p>Datetime</p></td>
<td class=3D"confluenceTd">
<p>link valid start datetime</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>valid_until_datetime</p></td>
<td class=3D"confluenceTd">
<p>Datetime</p></td>
<td class=3D"confluenceTd">
<p>link valid until datetime</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>is_disabled</p></td>
<td class=3D"confluenceTd">
<p>Boolean</p></td>
<td class=3D"confluenceTd">
<p>link is disabled</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>from_node_id</p></td>
<td class=3D"confluenceTd">
<p>UUID</p></td>
<td class=3D"confluenceTd">
<p>From node identifier</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>from_graph_id</p></td>
<td class=3D"confluenceTd">
<p>Integer</p></td>
<td class=3D"confluenceTd">
<p>link from graph identifier</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>from_node_type_id</p></td>
<td class=3D"confluenceTd">
<p>Integer</p></td>
<td class=3D"confluenceTd">
<p>from node type</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>from_source_id</p></td>
<td class=3D"confluenceTd">
<p>String</p></td>
<td class=3D"confluenceTd">
<p>Source_id of from_node</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>from_name</p></td>
<td class=3D"confluenceTd">
<p>String</p></td>
<td class=3D"confluenceTd">
<p>Name of from_node</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>from_notes</p></td>
<td class=3D"confluenceTd">
<p>String</p></td>
<td class=3D"confluenceTd">
<p>Notes of from_node</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>from_metadata</p></td>
<td class=3D"confluenceTd">
<p>String</p></td>
<td class=3D"confluenceTd">
<p>JSON metadata for from_node</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>from_inserted_datetime</p></td>
<td class=3D"confluenceTd">
<p>Datetime</p></td>
<td class=3D"confluenceTd">
<p>inserted_datetime for from_node</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>from_updated_datetime</p></td>
<td class=3D"confluenceTd">
<p>Datetime</p></td>
<td class=3D"confluenceTd">
<p>updated_datetime for from_node</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>from_updated_by</p></td>
<td class=3D"confluenceTd">
<p>String</p></td>
<td class=3D"confluenceTd">
<p>user who made insert or last update to from_node</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>to_*</p></td>
<td class=3D"confluenceTd">
<p></p></td>
<td class=3D"confluenceTd">
<p>Same fields for to_node=E2=80=A6</p></td>
</tr>
</tbody>
</table>
</div>
<p>Example:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">&nbsp;{
&nbsp; &nbsp; &nbsp; &nbsp; "depth": 1,
&nbsp; &nbsp; &nbsp; &nbsp; "direction": "FROM",
&nbsp; &nbsp; &nbsp; &nbsp; "link_order": null,
&nbsp; &nbsp; &nbsp; &nbsp; "link_id": "22449C08-0C50-4D40-B385-305AFC53BC3=
0",
&nbsp; &nbsp; &nbsp; &nbsp; "link_type_id": 1,
&nbsp; &nbsp; &nbsp; &nbsp; "link_metadata": null,
&nbsp; &nbsp; &nbsp; &nbsp; "valid_from_datetime": null,
&nbsp; &nbsp; &nbsp; &nbsp; "valid_until_datetime": null,
&nbsp; &nbsp; &nbsp; &nbsp; "is_disabled": null,
&nbsp; &nbsp; &nbsp; &nbsp; "from_node_id": "B35F2EBE-2C72-4E2D-9FE3-B907CD=
025572",
&nbsp; &nbsp; &nbsp; &nbsp; "from_graph_id": 26,
&nbsp; &nbsp; &nbsp; &nbsp; "from_node_type_id": 0,
&nbsp; &nbsp; &nbsp; &nbsp; "from_source_id": "BLUE",
&nbsp; &nbsp; &nbsp; &nbsp; "from_name": "blue",
&nbsp; &nbsp; &nbsp; &nbsp; "from_notes": "a color on the short end of the =
visible spectrum",
&nbsp; &nbsp; &nbsp; &nbsp; "from_metadata": "{\"primary\": 1}",
&nbsp; &nbsp; &nbsp; &nbsp; "from_inserted_datetime": "2024-01-03T14:35:55.=
813000",
&nbsp; &nbsp; &nbsp; &nbsp; "from_updated_datetime": "2024-01-03T14:35:55.8=
13000",
&nbsp; &nbsp; &nbsp; &nbsp; "from_updated_by": null,
&nbsp; &nbsp; &nbsp; &nbsp; "to_node_id": "2BEBD78A-E06E-46E5-AD49-06DD8CEA=
6162",
&nbsp; &nbsp; &nbsp; &nbsp; "to_graph_id": 26,
&nbsp; &nbsp; &nbsp; &nbsp; "to_node_type_id": 0,
&nbsp; &nbsp; &nbsp; &nbsp; "to_source_id": "PURPLE",
&nbsp; &nbsp; &nbsp; &nbsp; "to_name": "purple",
&nbsp; &nbsp; &nbsp; &nbsp; "to_notes": "a mix of red and blue",
&nbsp; &nbsp; &nbsp; &nbsp; "to_metadata": "{\"primary\": 0}",
&nbsp; &nbsp; &nbsp; &nbsp; "to_inserted_datetime": "2024-01-03T14:35:55.81=
3000",
&nbsp; &nbsp; &nbsp; &nbsp; "to_updated_datetime": "2024-01-03T14:35:55.813=
000",
&nbsp; &nbsp; &nbsp; &nbsp; "to_updated_by": "breanna@swiftly.com",
&nbsp; &nbsp; &nbsp; &nbsp; "step": 1
&nbsp; &nbsp; },</pre>
</div>
</div>
<p><br>
return type =E2=80=9CNODE=E2=80=9D</p>
<p>Distinct List of Standard Node object, see node-get</p>
<p>Example:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">&nbsp; =
&nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; "node_id": "2BEBD78A-E06E-46E5-AD49-06DD8CEA616=
2",
&nbsp; &nbsp; &nbsp; &nbsp; "node_type_id": 0,
&nbsp; &nbsp; &nbsp; &nbsp; "graph_id": 26,
&nbsp; &nbsp; &nbsp; &nbsp; "source_id": "PURPLE",
&nbsp; &nbsp; &nbsp; &nbsp; "name": "purple",
&nbsp; &nbsp; &nbsp; &nbsp; "notes": "a mix of red and blue",
&nbsp; &nbsp; &nbsp; &nbsp; "metadata": "{\"primary\": 0}",
&nbsp; &nbsp; &nbsp; &nbsp; "inserted_datetime": "2024-01-03T14:35:55.81300=
0",
&nbsp; &nbsp; &nbsp; &nbsp; "updated_datetime": "2024-01-03T14:35:55.813000=
",
&nbsp; &nbsp; &nbsp; &nbsp; "updated_by": "breanna@swiftly.com"
&nbsp; &nbsp; }</pre>
</div>
</div>
<p>return type =E2=80=9CLINK=E2=80=9D</p>
<p>List of Link object with source_id denormalized from from and to nodes:<=
/p>
<p>Example:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">&nbsp; =
&nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; "link_id": "22449C08-0C50-4D40-B385-305AFC53BC3=
0",
&nbsp; &nbsp; &nbsp; &nbsp; "link_type_id": 1,
&nbsp; &nbsp; &nbsp; &nbsp; "from_graph_id": 26,
&nbsp; &nbsp; &nbsp; &nbsp; "from_node_id": "B35F2EBE-2C72-4E2D-9FE3-B907CD=
025572",
&nbsp; &nbsp; &nbsp; &nbsp; "from_source_id": "BLUE",
&nbsp; &nbsp; &nbsp; &nbsp; "to_graph_id": 26,
&nbsp; &nbsp; &nbsp; &nbsp; "to_node_id": "2BEBD78A-E06E-46E5-AD49-06DD8CEA=
6162",
&nbsp; &nbsp; &nbsp; &nbsp; "to_source_id": "PURPLE",
&nbsp; &nbsp; &nbsp; &nbsp; "link_order": null,
&nbsp; &nbsp; &nbsp; &nbsp; "metadata": null,
&nbsp; &nbsp; &nbsp; &nbsp; "valid_from_datetime": null,
&nbsp; &nbsp; &nbsp; &nbsp; "valid_until_datetime": null,
&nbsp; &nbsp; &nbsp; &nbsp; "is_disabled": null
&nbsp; &nbsp; }</pre>
</div>
</div>
<h3 id=3D"TaxonomyAPI-Seealso.2">See also</h3>
<p>node-query</p>
<h2 id=3D"TaxonomyAPI-node-create">node-create</h2>
<p>create one or more nodes.</p>
<p>This is the basic method that can be accomplished with graph-import or g=
raph-batch. The underlying implementation is the same.</p>
<h3 id=3D"TaxonomyAPI-Request.11">Request</h3>
<p>POST /api/taxonomy/node/create</p>
<h3 id=3D"TaxonomyAPI-Seealso.3">See also</h3>
<p>graph-import</p>
<p>graph-batch</p>
<h2 id=3D"TaxonomyAPI-node-get">node-get</h2>
<p>Get a single node with either a node_id or a graph_id and source_id.</p>
<p>This is the most rudimentary way to get a node object:</p>
<h3 id=3D"TaxonomyAPI-Request.12">Request</h3>
<p>GET/api/taxonomy/node/get</p>
<h3 id=3D"TaxonomyAPI-Params.2">Params</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"56=
6befd6-f752-41ea-a527-1b36931f7620" class=3D"confluenceTable">
<colgroup>
<col style=3D"width: 173.0px;">
<col style=3D"width: 87.0px;">
<col style=3D"width: 102.0px;">
<col style=3D"width: 394.0px;">
</colgroup>
<tbody>
<tr>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Field</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Type</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Required</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Description</strong></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>node_id</p></td>
<td class=3D"confluenceTd">
<p>UUID</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>node identifier</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>graph_id</p></td>
<td class=3D"confluenceTd">
<p>Integer</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>graph id if using source_id to fetch</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>source_id</p></td>
<td class=3D"confluenceTd">
<p>String</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>Must also provide graph_id</p></td>
</tr>
</tbody>
</table>
</div>
<h3 id=3D"TaxonomyAPI-Response.7">Response</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{
&nbsp; &nbsp; "node_id": "4F4BCEA7-F2F6-4FE3-8650-49589C7F0C18",
&nbsp; &nbsp; "node_type_id": 0,
&nbsp; &nbsp; "graph_id": 26,
&nbsp; &nbsp; "source_id": "GREEN",
&nbsp; &nbsp; "name": "green",
&nbsp; &nbsp; "notes": "a green color",
&nbsp; &nbsp; "metadata": "{\"primary\": 1}",
&nbsp; &nbsp; "inserted_datetime": "2024-01-03T14:35:55.813000",
&nbsp; &nbsp; "updated_datetime": "2024-01-03T14:35:55.813000",
&nbsp; &nbsp; "updated_by": "breanna@swiftly.com"
}</pre>
</div>
</div>
<p>200, 404, 500</p>
<h3 id=3D"TaxonomyAPI-Seealso.4">See also</h3>
<p>node-query</p>
<h2 id=3D"TaxonomyAPI-node-delete">node-delete</h2>
<p>Delete one or more nodes by node_id. Can also be accomplished with graph=
-batch.</p>
<h3 id=3D"TaxonomyAPI-Request.13">Request</h3>
<p>DELETE /api/taxonomy/node/delete</p>
<h3 id=3D"TaxonomyAPI-Body.3">Body</h3>
<p></p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{
&nbsp; &nbsp; "nodes": [
&nbsp; &nbsp; &nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;"node_id": "4FC0CF01-F54A-40C5-8C7=
4-A13CD0858D31"
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; ]
}</pre>
</div>
</div>
<h3 id=3D"TaxonomyAPI-Response.8">Response</h3>
<p>200, 500, no JSON returned.</p>
<h3 id=3D"TaxonomyAPI-Seealso.5">See also</h3>
<p>graph-batch</p>
<h2 id=3D"TaxonomyAPI-node-update">node-update</h2>
<p>Update a single node.</p>
<p>We strongly suggest using graph-batch as it will allow updates of multip=
le nodes in single call.</p>
<p>Under the covers, graph-batch with a node Update will call the same code=
.</p>
<p>note:</p>
<p>node-update at this time requires node_id and all of the fields noted be=
low. It does not PATCH individual fields of the node (like update-link does=
).</p>
<p>This method does not allow change of node_id or graph_id</p>
<h3 id=3D"TaxonomyAPI-Request.14">Request</h3>
<p>POST /api/taxonomy/node/update</p>
<h3 id=3D"TaxonomyAPI-Body.4">Body</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{
    "node_id": "4F4BCEA7-F2F6-4FE3-8650-49589C7F0C18",
    "node_type_id": 0,
    "graph_id": 26,
    "source_id": "GREEN",
    "name": "green",
    "notes": "a green-ish color",
    "metadata": "{\"primary\": 1}",
    "updated_by": "breanna@swiftly.com"
}</pre>
</div>
</div>
<h3 id=3D"TaxonomyAPI-Response.9">Response</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{
&nbsp; &nbsp; "node_id": "4F4BCEA7-F2F6-4FE3-8650-49589C7F0C18",
&nbsp; &nbsp; "node_type_id": 0,
&nbsp; &nbsp; "graph_id": 26,
&nbsp; &nbsp; "source_id": "GREEN",
&nbsp; &nbsp; "name": "green",
&nbsp; &nbsp; "notes": "a green-ish color",
&nbsp; &nbsp; "metadata": "{\"primary\": 1}",
&nbsp; &nbsp; "inserted_datetime": "2024-01-03T14:35:55.813000",
&nbsp; &nbsp; "updated_datetime": "2024-02-28T15:31:58.543000",
&nbsp; &nbsp; "updated_by": "breanna@swiftly.com"
}</pre>
</div>
</div>
<h3 id=3D"TaxonomyAPI-Seealso.6">See also</h3>
<p>graph-batch</p>
<h2 id=3D"TaxonomyAPI-node-query">node-query</h2>
<p>Query nodes within or across graphs.</p>
<p>Good for finding nodes by their properties.</p>
<p>This is also the syntax for the =E2=80=9Cseed=E2=80=9D of a graph-query<=
/p>
<h3 id=3D"TaxonomyAPI-Request.15">Request</h3>
<p>POST DELETE /api/taxonomy/node/query</p>
<h3 id=3D"TaxonomyAPI-Body.5">Body</h3>
<p>Example:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{
&nbsp; &nbsp; "graph_id": { "value": 26 },
&nbsp; &nbsp; "metadata": { "field": "primary", "value": 1 }
}</pre>
</div>
</div>
<p>node query can query any Property of a node.</p>
<p><code>['node_id', 'node_type_id', 'graph_id', 'source_id', 'name', 'note=
s', 'metadata', 'inserted_datetime', 'updated_datetime', 'updated_by']</cod=
e></p>
<p>Each Property in the query JSON is keyed by a Node property name and has=
 a predicate object</p>
<p>All Predicates are ANDed together, there is no Boolean combiner option a=
t this time.</p>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"5b=
0b1bd1-3e1e-4592-945f-526779babdf5" class=3D"confluenceTable">
<colgroup>
<col style=3D"width: 173.0px;">
<col style=3D"width: 87.0px;">
<col style=3D"width: 102.0px;">
<col style=3D"width: 394.0px;">
</colgroup>
<tbody>
<tr>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Field</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Type</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Required</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Description</strong></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>op</p></td>
<td class=3D"confluenceTd">
<p>String</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>Operand to use to compare Property to Value,</p>
<p>see below. Unary operators do not support Values</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>value</p></td>
<td class=3D"confluenceTd">
<p>Any</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>depends on operator. value should be appropriate to Property being queri=
ed.</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>field</p></td>
<td class=3D"confluenceTd">
<p>String</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>Required if Property is =E2=80=9Cmetadata=E2=80=9D</p></td>
</tr>
</tbody>
</table>
</div>
<p>=E2=80=9Cop=E2=80=9D: an operand</p>
<p>which can be one of the operators:</p>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"d0=
283de9-1731-4128-be98-ffd6304949a7" class=3D"confluenceTable">
<colgroup>
<col style=3D"width: 234.0px;">
<col style=3D"width: 526.0px;">
</colgroup>
<tbody>
<tr>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Operator</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Description</strong></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>EQ, =3D</p></td>
<td class=3D"confluenceTd">
<p>property is equal to Value</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>NE, !=3D</p></td>
<td class=3D"confluenceTd">
<p>property is not equal to Value</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>LE, &lt;=3D</p></td>
<td class=3D"confluenceTd">
<p>property is &lt;=3D to Value</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>GE, &gt;=3D</p></td>
<td class=3D"confluenceTd">
<p>property is &gt;=3D the Value</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>LT, &lt;</p></td>
<td class=3D"confluenceTd">
<p>property is less than the Value</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>GT, &gt;</p></td>
<td class=3D"confluenceTd">
<p>property is less than the Value</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>LIKE</p></td>
<td class=3D"confluenceTd">
<p>field is like (Using SQL format) the Value</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>=E2=80=9CNOT LIKE=E2=80=9D</p></td>
<td class=3D"confluenceTd">
<p>property is not like Value</p></td>
</tr>
</tbody>
</table>
</div>
<p>Unary Operators (does not require/support Value)</p>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"a6=
d995f4-e67f-4815-9bd9-81fc00c39714" class=3D"confluenceTable">
<colgroup>
<col style=3D"width: 234.0px;">
<col style=3D"width: 526.0px;">
</colgroup>
<tbody>
<tr>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Operator</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Description</strong></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>ISNULL, =E2=80=9CIS NULL=E2=80=9D</p></td>
<td class=3D"confluenceTd">
<p>property is null</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>NOTNULL, =E2=80=9CNOT NULL=E2=80=9D</p></td>
<td class=3D"confluenceTd">
<p>property is not null</p></td>
</tr>
</tbody>
</table>
</div>
<h3 id=3D"TaxonomyAPI-Response.10">Response</h3>
<p>A list of nodes:</p>
<p>Note: The response is not currently paginated.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">[
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; "node_id": "AF626586-B846-4455-8C19-342A1F22870=
C",
&nbsp; &nbsp; &nbsp; &nbsp; "node_type_id": 0,
&nbsp; &nbsp; &nbsp; &nbsp; "graph_id": 26,
&nbsp; &nbsp; &nbsp; &nbsp; "source_id": "RED",
&nbsp; &nbsp; &nbsp; &nbsp; "name": "red",
&nbsp; &nbsp; &nbsp; &nbsp; "notes": "a red color",
&nbsp; &nbsp; &nbsp; &nbsp; "metadata": "{\"primary\": 1}",
&nbsp; &nbsp; &nbsp; &nbsp; "inserted_datetime": "2024-01-03T14:35:55.81300=
0",
&nbsp; &nbsp; &nbsp; &nbsp; "updated_datetime": "2024-01-03T14:35:55.813000=
",
&nbsp; &nbsp; &nbsp; &nbsp; "updated_by": null
&nbsp; &nbsp; },
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; "node_id": "4F4BCEA7-F2F6-4FE3-8650-49589C7F0C1=
8",
&nbsp; &nbsp; &nbsp; &nbsp; "node_type_id": 0,
&nbsp; &nbsp; &nbsp; &nbsp; "graph_id": 26,
&nbsp; &nbsp; &nbsp; &nbsp; "source_id": "GREEN",
&nbsp; &nbsp; &nbsp; &nbsp; "name": "green",
&nbsp; &nbsp; &nbsp; &nbsp; "notes": "a green-ish color",
&nbsp; &nbsp; &nbsp; &nbsp; "metadata": "{\"primary\": 1}",
&nbsp; &nbsp; &nbsp; &nbsp; "inserted_datetime": "2024-01-03T14:35:55.81300=
0",
&nbsp; &nbsp; &nbsp; &nbsp; "updated_datetime": "2024-02-28T15:31:58.543000=
",
&nbsp; &nbsp; &nbsp; &nbsp; "updated_by": "breanna@swiftly.com"
&nbsp; &nbsp; },
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; "node_id": "B35F2EBE-2C72-4E2D-9FE3-B907CD02557=
2",
&nbsp; &nbsp; &nbsp; &nbsp; "node_type_id": 0,
&nbsp; &nbsp; &nbsp; &nbsp; "graph_id": 26,
&nbsp; &nbsp; &nbsp; &nbsp; "source_id": "BLUE",
&nbsp; &nbsp; &nbsp; &nbsp; "name": "blue",
&nbsp; &nbsp; &nbsp; &nbsp; "notes": "a color on the short end of the visib=
le spectrum",
&nbsp; &nbsp; &nbsp; &nbsp; "metadata": "{\"primary\": 1}",
&nbsp; &nbsp; &nbsp; &nbsp; "inserted_datetime": "2024-01-03T14:35:55.81300=
0",
&nbsp; &nbsp; &nbsp; &nbsp; "updated_datetime": "2024-01-03T14:35:55.813000=
",
&nbsp; &nbsp; &nbsp; &nbsp; "updated_by": null
&nbsp; &nbsp; }
]</pre>
</div>
</div>
<h3 id=3D"TaxonomyAPI-Seealso.7">See also</h3>
<p>graph-query</p>
<h2 id=3D"TaxonomyAPI-node-get-orphans">node-get-orphans</h2>
<p>If all links are deleted to a Node from the graph to which the node belo=
ngs, the node is considered an =E2=80=9Corphan=E2=80=9D. It can never be fo=
und by way of a graph-query. (It can be found with node-query).</p>
<p>To identify which nodes have been orphaned, use node-get-orphans</p>
<h3 id=3D"TaxonomyAPI-Request.16">Request</h3>
<h3 id=3D"TaxonomyAPI-Body.6">Body</h3>
<h3 id=3D"TaxonomyAPI-Params.3">Params</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"f3=
a6454b-7d0b-4302-9e53-37e725be11e1" class=3D"confluenceTable">
<colgroup>
<col style=3D"width: 173.0px;">
<col style=3D"width: 87.0px;">
<col style=3D"width: 102.0px;">
<col style=3D"width: 394.0px;">
</colgroup>
<tbody>
<tr>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Field</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Type</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Required</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Description</strong></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>links</p></td>
<td class=3D"confluenceTd">
<p>List: Link</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>list of links to be compared to the stored graph</p></td>
</tr>
</tbody>
</table>
</div>
<h3 id=3D"TaxonomyAPI-Response.11">Response</h3>
<p>A list of orphan nodes.</p>
<h2 id=3D"TaxonomyAPI-node-merge">node-merge</h2>
<p>Merge one node into another.</p>
<p>This moves all links (from within and across graphs) to the destination =
node.</p>
<h3 id=3D"TaxonomyAPI-Request.17">Request</h3>
<p>POST /api/taxonomy/node/merge</p>
<h3 id=3D"TaxonomyAPI-Body.7">Body</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{
&nbsp; &nbsp; "graph_id": 45,
&nbsp; &nbsp; "from_node": { "source_id": "AZURE"},
&nbsp; &nbsp; "to_node": {"source_id": "BLUE"}
}</pre>
</div>
</div>
<h3 id=3D"TaxonomyAPI-Seealso.8">See also</h3>
<p>graph-batch</p>
<h2 id=3D"TaxonomyAPI-node-split">node-split</h2>
<p>Split a node into two nodes.</p>
<p>This creates a new node and copies links from the source node to the new=
 node.</p>
<p>See graph-batch which can combine this operation with other appropriate =
operations such as updating the source node and deletion of unneeded links.=
</p>
<h3 id=3D"TaxonomyAPI-Request.18">Request</h3>
<p>POST /api/taxonomy/node/split</p>
<h3 id=3D"TaxonomyAPI-Body.8">Body</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{
&nbsp; &nbsp; "graph_id": 45,
&nbsp; &nbsp; "from_node": { "source_id": "BLUE"},
&nbsp; &nbsp; "to_node": {
      "source_id": "AZURE",
  &nbsp; &nbsp; "name": "azure",
  &nbsp; &nbsp; "notes": "the color of the sky",
  &nbsp; &nbsp; "updated_by": "breanna@swiftly.com"
&nbsp; &nbsp; }
}

from_node may be specified with "node_id" or "source_id"
</pre>
</div>
</div>
<h3 id=3D"TaxonomyAPI-Response.12">Response</h3>
<p>new to-node created.</p>
<h3 id=3D"TaxonomyAPI-Seealso.9">See also</h3>
<p>graph-batch</p>
<h2 id=3D"TaxonomyAPI-link-move">link-move</h2>
<p>(function not implemented)</p>
<h2 id=3D"TaxonomyAPI-link-copy">link-copy</h2>
<p>(function not implemented)</p>
<h2 id=3D"TaxonomyAPI-link-type-get">link-type-get</h2>
<p>get a link type and all descendant link types.</p>
<p>This operation is used internally by graph-query to determine which link=
 types to query.</p>
<h3 id=3D"TaxonomyAPI-Request.19">Request</h3>
<p>GET /api/taxonomy/link-type/get?link_type_id=3D3</p>
<h3 id=3D"TaxonomyAPI-Response.13">Response</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">[
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; "link_type_id": 3,
&nbsp; &nbsp; &nbsp; &nbsp; "parent_link_type": -1,
&nbsp; &nbsp; &nbsp; &nbsp; "name": "related",
&nbsp; &nbsp; &nbsp; &nbsp; "notes": "used primarily to link equivalent nod=
e across graphs",
&nbsp; &nbsp; &nbsp; &nbsp; "metadata_schema": null,
&nbsp; &nbsp; &nbsp; &nbsp; "inserted_datetime": "2024-01-05T22:12:25.44000=
0",
&nbsp; &nbsp; &nbsp; &nbsp; "updated_datetime": "2024-01-05T22:12:25.440000=
",
&nbsp; &nbsp; &nbsp; &nbsp; "updated_by": "breann@swiftly.com"
&nbsp; &nbsp; },
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; "link_type_id": 4,
&nbsp; &nbsp; &nbsp; &nbsp; "parent_link_type": 3,
&nbsp; &nbsp; &nbsp; &nbsp; "name": "rel_prod_class_nav",
&nbsp; &nbsp; &nbsp; &nbsp; "notes": "related type link between product cla=
ssification and navigation taxonomies",
&nbsp; &nbsp; &nbsp; &nbsp; "metadata_schema": null,
&nbsp; &nbsp; &nbsp; &nbsp; "inserted_datetime": "2024-01-05T22:12:25.44000=
0",
&nbsp; &nbsp; &nbsp; &nbsp; "updated_datetime": "2024-01-05T22:12:25.440000=
",
&nbsp; &nbsp; &nbsp; &nbsp; "updated_by": "breann@swiftly.com"
&nbsp; &nbsp; },
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; "link_type_id": 5,
&nbsp; &nbsp; &nbsp; &nbsp; "parent_link_type": 3,
&nbsp; &nbsp; &nbsp; &nbsp; "name": "rel_std_class_tenant_class",
&nbsp; &nbsp; &nbsp; &nbsp; "notes": "related type link between swiftly sta=
ndard classficication taxonomy and tenant classfication taxonomy",
&nbsp; &nbsp; &nbsp; &nbsp; "metadata_schema": null,
&nbsp; &nbsp; &nbsp; &nbsp; "inserted_datetime": "2024-01-05T22:14:12.49700=
0",
&nbsp; &nbsp; &nbsp; &nbsp; "updated_datetime": "2024-01-05T22:14:12.497000=
",
&nbsp; &nbsp; &nbsp; &nbsp; "updated_by": "breann@swiftly.com"
&nbsp; &nbsp; },
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; "link_type_id": 6,
&nbsp; &nbsp; &nbsp; &nbsp; "parent_link_type": 3,
&nbsp; &nbsp; &nbsp; &nbsp; "name": "rel_std_nav_tenant_nav",
&nbsp; &nbsp; &nbsp; &nbsp; "notes": "related type link between swiftly sta=
ndard navigation taxonomy and tenant-custom navigation",
&nbsp; &nbsp; &nbsp; &nbsp; "metadata_schema": null,
&nbsp; &nbsp; &nbsp; &nbsp; "inserted_datetime": "2024-01-05T22:15:11.01700=
0",
&nbsp; &nbsp; &nbsp; &nbsp; "updated_datetime": "2024-01-05T22:15:11.017000=
",
&nbsp; &nbsp; &nbsp; &nbsp; "updated_by": "breann@swiftly.com"
&nbsp; &nbsp; }
]</pre>
</div>
</div>
<h3 id=3D"TaxonomyAPI-Seealso.10">See also</h3>
<p>graph-query</p>
<h2 id=3D"TaxonomyAPI-node-product-create">node-product-create</h2>
<p>Create a join between a Node and a Swiftly Product (keyed by Product_Cod=
e (UPC or PLU))</p>
<h3 id=3D"TaxonomyAPI-Request.20">Request</h3>
<p>POST /api/taxonomy/node-product/create</p>
<h3 id=3D"TaxonomyAPI-Body.9">Body</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{
&nbsp; &nbsp; "node_products": [
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; "node_id": "69B3AAA2-D11D-4DD7-B667-F7842BF90655",
&nbsp; &nbsp; &nbsp; "product_code": "4011",
&nbsp; &nbsp; &nbsp; "updated_by": "breanna@swiftly.com"
&nbsp; &nbsp; },
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; "node_id": "69B3AAA2-D11D-4DD7-B667-F7842BF90655",
&nbsp; &nbsp; &nbsp; "product_code": "94011",
&nbsp; &nbsp; &nbsp; "updated_by": "breanna@swiftly.com"
&nbsp; &nbsp; },
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; "node_id": "69B3AAA2-D11D-4DD7-B667-F7842BF90655",
&nbsp; &nbsp; &nbsp; "product_code": "00074904100005",
&nbsp; &nbsp; &nbsp; "updated_by": "breanna@swiftly.com"
&nbsp; &nbsp; }
&nbsp; &nbsp;=20
&nbsp; ]
}</pre>
</div>
</div>
<h3 id=3D"TaxonomyAPI-Response.14">Response</h3>
<p>List of completed node_product records.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">[
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; "node_id": "69B3AAA2-D11D-4DD7-B667-F7842BF9065=
5",
&nbsp; &nbsp; &nbsp; &nbsp; "product_code": "84011",
&nbsp; &nbsp; &nbsp; &nbsp; "updated_by": "breanna@swiftly.com",
&nbsp; &nbsp; &nbsp; &nbsp; "inserted_datetime": "2024-02-28T16:59:10.63422=
6",
&nbsp; &nbsp; &nbsp; &nbsp; "updated_datetime": "2024-02-28T16:59:10.634226=
"
&nbsp; &nbsp; }
]</pre>
</div>
</div>
<h3 id=3D"TaxonomyAPI-Seealso.11">See also</h3>
<p>node-product-get</p>
<p>node-product-delete</p>
<h2 id=3D"TaxonomyAPI-node-product-get">node-product-get</h2>
<h3 id=3D"TaxonomyAPI-Request.21">Request</h3>
<p>GET /api/taxonomy/node-product/get?node_id=3D5DFE9EA6-3716-4E98-9E08-858=
6BBA97EAE</p>
<p>GET /api/taxonomy/node-product/get?product_code=3D00732346288605</p>
<h3 id=3D"TaxonomyAPI-Parameters.1">Parameters</h3>
<p>node_id</p>
<p>product_code</p>
<h3 id=3D"TaxonomyAPI-Response.15">Response</h3>
<p>List of completed node_product records with product_name joined in</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">[
   {
        "node_product_id": 5,
        "node_id": "5DFE9EA6-3716-4E98-9E08-8586BBA97EAE",
        "product_code": "00856098008097",
        "product_name": "HOLIDAY COCKTAIL COLLECTION",
        "inserted_datetime": "2024-01-25T16:53:00.933000",
        "updated_datetime": "2024-01-25T16:53:00.933000",
        "updated_by": "breanna@swiftly.com"
    },
    {
        "node_product_id": 6,
        "node_id": "5DFE9EA6-3716-4E98-9E08-8586BBA97EAE",
        "product_code": "00732346288605",
        "product_name": "Coastal Cocktails (Coastal Cocktails Inc) Cocktail=
 Mix Bottle 4.6foz X3",
        "inserted_datetime": "2024-01-25T16:53:00.933000",
        "updated_datetime": "2024-01-25T16:53:00.933000",
        "updated_by": "breanna@swiftly.com"
    },
    {
        "node_product_id": 7,
        "node_id": "5DFE9EA6-3716-4E98-9E08-8586BBA97EAE",
        "product_code": "00732346302509",
        "product_name": "Coastal Cocktails (Coastal Cocktails Inc) Cocktail=
 Mix Bottle 2.3foz X5",
        "inserted_datetime": "2024-01-25T16:53:00.933000",
        "updated_datetime": "2024-01-25T16:53:00.933000",
        "updated_by": "breanna@swiftly.com"
    },
    {
        "node_product_id": 8,
        "node_id": "5DFE9EA6-3716-4E98-9E08-8586BBA97EAE",
        "product_code": "00732346301915",
        "product_name": "Unbranded Flavoured Mixer  Bottle 4.6foz X3",
        "inserted_datetime": "2024-01-25T16:53:00.933000",
        "updated_datetime": "2024-01-25T16:53:00.933000",
        "updated_by": "breanna@swiftly.com"
    }
]</pre>
</div>
</div>
<h2 id=3D"TaxonomyAPI-node-product-delete">node-product-delete</h2>
<p>Delete node to product relationships</p>
<p>either by the node_id or by a list of node_product_ids (keys to the reco=
rds).</p>
<h3 id=3D"TaxonomyAPI-Request.22">Request</h3>
<p>DELETE /api/taxonomy/node-product/delete</p>
<h3 id=3D"TaxonomyAPI-Body.10">Body</h3>
<p>by node_id:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{
&nbsp; &nbsp; "node_id": "69B3AAA2-D11D-4DD7-B667-F7842BF90655",
}</pre>
</div>
</div>
<p>by node_product_id list:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{
&nbsp;&nbsp; &nbsp; "node_product_ids": [8, 9, 10]
}</pre>
</div>
</div>
<h3 id=3D"TaxonomyAPI-Response.16">Response</h3>
<p>code 200, 404, 500</p>
<h3 id=3D"TaxonomyAPI-SeeAlso.1">See Also</h3>
<p>node-product-get</p>
<p></p>
<h2 id=3D"TaxonomyAPI-node-tenant-product-create">node-tenant-product-creat=
e</h2>
<p>create a record that joins a node to a tenant product. This is different=
 than a Swiftly Product in that a tenant_id is required and it registers a =
proprietary item_code, not a product_code (UPC or PLU).</p>
<p>the node can be specified either by node_id or source_id (if the graph_i=
d is explicitly specified also)</p>
<h3 id=3D"TaxonomyAPI-Request.23">Request</h3>
<p>POST api/taxonomy/node-tenant-product/create</p>
<h3 id=3D"TaxonomyAPI-Body.11">Body<br></h3>
<p>by node_id</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{
&nbsp; &nbsp; "tenant_id": "hlnd",
&nbsp; &nbsp; "node_products": [
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; "node_id": "14C270DF-9548-4D9D-A3B7-7553F56BE465",
&nbsp; &nbsp; &nbsp; "item_code": "88133401260",
&nbsp; &nbsp; &nbsp; "updated_by": "breanna@swiftly.com"
&nbsp; &nbsp; },
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; "node_id": "14C270DF-9548-4D9D-A3B7-7553F56BE465",
&nbsp; &nbsp; &nbsp; "item_code": "7003864188",
&nbsp; &nbsp; &nbsp; "updated_by": "breanna@swiftly.com"
&nbsp; &nbsp; }
&nbsp; ]
}</pre>
</div>
</div>
<p></p>
<p>by source_id</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{
&nbsp; &nbsp; "tenant_id": "hlnd",
&nbsp; &nbsp; "graph_id": 49,
&nbsp; &nbsp; "by_source_id": true,
&nbsp; &nbsp; "node_products": [
  &nbsp; &nbsp; {
  &nbsp; &nbsp; &nbsp; "source_id": "Product/canned-fruit-for-cooking-and-b=
aking",
  &nbsp; &nbsp; &nbsp; "item_code": "7205860692",
  &nbsp; &nbsp; &nbsp; "updated_by": "breanna@swiftly.com"
  &nbsp; &nbsp; }
&nbsp;&nbsp; ]
}</pre>
</div>
</div>
<h3 id=3D"TaxonomyAPI-Params.4">Params</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"8c=
ede2f1-3b49-4213-98c0-6100bdf3c832" class=3D"confluenceTable">
<colgroup>
<col style=3D"width: 123.0px;">
<col style=3D"width: 190.0px;">
<col style=3D"width: 61.0px;">
<col style=3D"width: 382.0px;">
</colgroup>
<tbody>
<tr>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Field</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Type</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Required</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Description</strong></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>tenant_id</p></td>
<td class=3D"confluenceTd">
<p>String</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>id of tenant to register items for</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>graph_id</p></td>
<td class=3D"confluenceTd">
<p>Integer</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>Only required if =E2=80=9Cby_source_id=E2=80=9D =3D true</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>by_source_id</p></td>
<td class=3D"confluenceTd">
<p>Boolean</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>If True, graph_id is required and NodeProduct.source_id is required.</p>=
</td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>node_products</p></td>
<td class=3D"confluenceTd">
<p>List[TenantNodeProduct]</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>list of TenantNodeProduct objects</p></td>
</tr>
</tbody>
</table>
</div>
<h4 id=3D"TaxonomyAPI-TenantNodeProduct">TenantNodeProduct</h4>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"91=
8ee248-2b0e-4b8e-aef6-7f1fe8a3f1e3" class=3D"confluenceTable">
<colgroup>
<col style=3D"width: 123.0px;">
<col style=3D"width: 190.0px;">
<col style=3D"width: 61.0px;">
<col style=3D"width: 382.0px;">
</colgroup>
<tbody>
<tr>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Field</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Type</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Required</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Description</strong></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>node_id</p></td>
<td class=3D"confluenceTd">
<p>Uniqueidentifier</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>Required if not by_source_id</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>source_id</p></td>
<td class=3D"confluenceTd">
<p>String</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>Required if by_source_id =3D true</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>item_code</p></td>
<td class=3D"confluenceTd">
<p>String</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>tenant item_code identifier</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>updated_by</p></td>
<td class=3D"confluenceTd">
<p>String</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>user that created or updated the record</p></td>
</tr>
</tbody>
</table>
</div>
<h3 id=3D"TaxonomyAPI-Response.17">Response</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">[
&nbsp; &nbsp; {
        "tenant_id": "hlnd",
&nbsp; &nbsp; &nbsp; &nbsp; "node_id": "14C270DF-9548-4D9D-A3B7-7553F56BE46=
5",
&nbsp; &nbsp; &nbsp; &nbsp; "item_code": "88133401260",
&nbsp; &nbsp; &nbsp; &nbsp; "updated_by": "breanna@swiftly.com",
&nbsp; &nbsp; &nbsp; &nbsp; "inserted_datetime": "2024-02-29T11:43:44.69957=
8",
&nbsp; &nbsp; &nbsp; &nbsp; "updated_datetime": "2024-02-29T11:43:44.699578=
"
&nbsp; &nbsp; },
&nbsp; &nbsp; {
        "tenant_id": "hlnd",
&nbsp; &nbsp; &nbsp; &nbsp; "node_id": "14C270DF-9548-4D9D-A3B7-7553F56BE46=
5",
&nbsp; &nbsp; &nbsp; &nbsp; "item_code": "7003864188",
&nbsp; &nbsp; &nbsp; &nbsp; "updated_by": "breanna@swiftly.com",
&nbsp; &nbsp; &nbsp; &nbsp; "inserted_datetime": "2024-02-29T11:43:44.69957=
8",
&nbsp; &nbsp; &nbsp; &nbsp; "updated_datetime": "2024-02-29T11:43:44.699578=
"
&nbsp; &nbsp; }
]</pre>
</div>
</div>
<h3 id=3D"TaxonomyAPI-SeeAlso.2">See Also</h3>
<h2 id=3D"TaxonomyAPI-node-tenant-product-get">node-tenant-product-get</h2>
<h3 id=3D"TaxonomyAPI-Request.24">Request</h3>
<p>GET /api/taxonomy/node-tenant-product/get?tenant_id=3Dhlnd&amp;item_code=
=3D&lt;item_code&gt;&amp;node_id=3D&lt;node_id&gt;</p>
<h3 id=3D"TaxonomyAPI-Params.5">Params</h3>
<p>Either item_code or node_id but not both.</p>
<p>item_code: get all records for tenant_id where item_code</p>
<p>node_id: get all records for tenant_id where item_code</p>
<h3 id=3D"TaxonomyAPI-Response.18">Response</h3>
<p>list of TenantNodeProduct objects</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">[
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; "node_tenant_product_id": 8,
&nbsp; &nbsp; &nbsp; &nbsp; "tenant_id": "hlnd",
&nbsp; &nbsp; &nbsp; &nbsp; "node_id": "14C270DF-9548-4D9D-A3B7-7553F56BE46=
5",
&nbsp; &nbsp; &nbsp; &nbsp; "item_code": "88133401260",
&nbsp; &nbsp; &nbsp; &nbsp; "inserted_datetime": "2024-02-29T11:43:44.70000=
0",
&nbsp; &nbsp; &nbsp; &nbsp; "updated_datetime": "2024-02-29T11:43:44.700000=
",
&nbsp; &nbsp; &nbsp; &nbsp; "updated_by": "breanna@swiftly.com"
&nbsp; &nbsp; },
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; "node_tenant_product_id": 9,
&nbsp; &nbsp; &nbsp; &nbsp; "tenant_id": "hlnd",
&nbsp; &nbsp; &nbsp; &nbsp; "node_id": "14C270DF-9548-4D9D-A3B7-7553F56BE46=
5",
&nbsp; &nbsp; &nbsp; &nbsp; "item_code": "7003864188",
&nbsp; &nbsp; &nbsp; &nbsp; "inserted_datetime": "2024-02-29T11:43:44.70000=
0",
&nbsp; &nbsp; &nbsp; &nbsp; "updated_datetime": "2024-02-29T11:43:44.700000=
",
&nbsp; &nbsp; &nbsp; &nbsp; "updated_by": "breanna@swiftly.com"
&nbsp; &nbsp; }
]</pre>
</div>
</div>
<h3 id=3D"TaxonomyAPI-SeeAlso.3">See Also</h3>
<h2 id=3D"TaxonomyAPI-node-tenant-product-delete">node-tenant-product-delet=
e</h2>
<p>delete all node_tenant_product records.</p>
<p>Can be done either by a list of the node_tenant_product_ids or by the no=
de_id to which the items are joined.</p>
<p>If node_is is specified then node_tenant_product_ids cannot be present.<=
/p>
<h3 id=3D"TaxonomyAPI-Request.25">Request</h3>
<p>DELETE /api/taxonomy/node-tenant-product/delete</p>
<h3 id=3D"TaxonomyAPI-Body.12">Body</h3>
<p>by id</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{
&nbsp; &nbsp;"tenant_id": "hlnd",
&nbsp; &nbsp;"node_tenant_product_ids": [ 3, 4]
}</pre>
</div>
</div>
<p>by node_id</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{
&nbsp; &nbsp;"tenant_id": "hlnd",
&nbsp; &nbsp;"node_id": "14C270DF-9548-4D9D-A3B7-7553F56BE465"
}</pre>
</div>
</div>
<h3 id=3D"TaxonomyAPI-Response.19">Response</h3>
<p>200, 500, No JSON is returned.</p>
<h3 id=3D"TaxonomyAPI-SeeAlso.4">See Also</h3>
<p></p>
<h2 id=3D"TaxonomyAPI-node-tenant-product-autoclassify">node-tenant-product=
-autoclassify</h2>
<p>This endpoint automatically adds node-tenant-product records for the spe=
cified tenant by inspecting the ingested tenant_product records and correla=
ting it against the specified graph which contains the Product Classificati=
on nodes.</p>
<p>This is the first step of onboarding tenant products. After successful C=
lassification, if the tenant Navigation taxonomy is ready, Categorization c=
an be executed which follows links between Classification and the tenant=E2=
=80=99s Navigation taxonomies to add Category node-tenant-product records.<=
/p>
<p>Normal operation is not incremental. All records for the tenant and the =
graph will be deleted and replaced.</p>
<p>If records have been added by hand they will be deleted. So If the mappi=
ng has been hand-edited, incremental mode will preserve manually entered re=
cords.</p>
<h3 id=3D"TaxonomyAPI-Request.26">Request</h3>
<p>POST /api/taxonomy/node-tenant-product/autoclassify</p>
<h3 id=3D"TaxonomyAPI-Body.13">Body</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{
  "tenant_id": "hlnd",
  "graph_id": 110,
   "updated_by": "breanna@swiftly.com",
   "incremental": false
 }</pre>
</div>
</div>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"70=
4877f1-782d-447c-bd0b-835afc7b5be8" class=3D"confluenceTable">
<colgroup>
<col style=3D"width: 123.0px;">
<col style=3D"width: 190.0px;">
<col style=3D"width: 61.0px;">
<col style=3D"width: 382.0px;">
</colgroup>
<tbody>
<tr>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Field</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Type</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Required</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Description</strong></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>tenant_id</p></td>
<td class=3D"confluenceTd">
<p>String</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>id of tenant to register items for</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>graph_id</p></td>
<td class=3D"confluenceTd">
<p>Integer</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>must specify the graph_id which will be used to autoclassify (the Produc=
ts Classification graph)</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>updated_by</p></td>
<td class=3D"confluenceTd">
<p>String</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>updater</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>incremental</p></td>
<td class=3D"confluenceTd">
<p>Boolean</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>If False (default), all existing recods will be deleted and rewritten fo=
r tenant_id/graph_id. Otherwise will preserve records that were hand-entere=
d.</p></td>
</tr>
</tbody>
</table>
</div>
<h3 id=3D"TaxonomyAPI-Response.20">Response</h3>
<p>200, 500, No JSON is returned.</p>
<h3 id=3D"TaxonomyAPI-SeeAlso.5">See Also</h3>
<p>node-tenant-product-autocat</p>
<h2 id=3D"TaxonomyAPI-node-tenant-product-autocat">node-tenant-product-auto=
cat</h2>
<p>This endpoint automatically adds node-tenant-product records for the spe=
cified tenant by following graph links starting from the nodes saved as a r=
esult of the node-tenant-product-autoclassify process. Nodes in the Swiftly=
 classification graph are linked to each tenant=E2=80=99s Product Classific=
ation (aka Navigation) graph. These cross-graph links are pre-established b=
etween the Swiftly Classification Graph and the template Swiftly Standard C=
ategories Graph which is cloned to create the starting point for each new T=
enant=E2=80=99s graph. The cross-graph links are also cloned in the process=
.</p>
<p>the general flow us Up the classification Graph to all parent nodes, acr=
oss to the Category graph and down the category graph to the leaf nodes. Th=
e number of steps is tracked for each possible path between the origin Clas=
slification node and the final leaf Category node. There may be many paths =
to many destination nodes but the shortest path is judged as the best quali=
ty connection and is selected in the end</p>
<p>As a result new node-tenant-product records are written for the Category=
 graph connected to the same tenant products, this one will be exported to =
the Product catalog ingestion system to assign Swiftly_category_ids to each=
 product.</p>
<h3 id=3D"TaxonomyAPI-Request.27">Request</h3>
<p>POST /api/taxonomy/node-tenant-product/autocat</p>
<h3 id=3D"TaxonomyAPI-Body.14">Body</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{
  "tenant_id": "hlnd",
  "classification_graph_id": 110,
  "category_graph_id": 114,
  "classification_link_type_id": 10,
  "cross_link_type_id": 4,
  "category_link_type_id": 11,
  "updated_by": "breanna@swiftly.com",
  "incremental": false
 }
</pre>
</div>
</div>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"27=
df9e24-6b71-45d6-b451-712b3cac14bb" class=3D"confluenceTable">
<colgroup>
<col style=3D"width: 204.0px;">
<col style=3D"width: 109.0px;">
<col style=3D"width: 61.0px;">
<col style=3D"width: 382.0px;">
</colgroup>
<tbody>
<tr>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Field</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Type</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Required</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Description</strong></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>tenant_id</p></td>
<td class=3D"confluenceTd">
<p>String</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>id of tenant to register items for</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>classification_graph_id</p></td>
<td class=3D"confluenceTd">
<p>Integer</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>must specify the graph_id which was used to autoclassify (the Products C=
lassification graph)</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>category_graph_id</p></td>
<td class=3D"confluenceTd">
<p>integer</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>the tenant=E2=80=99s product category (navigation) graph.</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>classification_link_type_id</p></td>
<td class=3D"confluenceTd">
<p>Integer</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>The value should be (10)</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>cross_link_type_id</p></td>
<td class=3D"confluenceTd">
<p>integer</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>The value should be (4)</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>category_link_type_id</p></td>
<td class=3D"confluenceTd">
<p>integer</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>The value should be (11)</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>updated_by</p></td>
<td class=3D"confluenceTd">
<p>String</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>updater</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>incremental</p></td>
<td class=3D"confluenceTd">
<p>Boolean</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>If False (default), all existing records will be deleted and rewritten f=
or tenant_id/graph_id. Otherwise it will preserve records that were hand-en=
tered.</p></td>
</tr>
</tbody>
</table>
</div>
<h3 id=3D"TaxonomyAPI-Response.21">Response</h3>
<p>200, 500, No JSON is returned.</p>
<h2 id=3D"TaxonomyAPI-node-tenant-product-export">node-tenant-product-expor=
t</h2>
<p>Export a complete map of all tenant products associated with a node.</p>
<p>The output format is customized to the needs of the product ingestion pr=
ocess and returns source_id for the joined node and it=E2=80=99s parent nod=
e if that node is not the Root of the graph.</p>
<p></p>
<p>The number of results should be nearly the number of products in the ten=
ant catalog so pagination is required. Suggested page size of 10000 seems t=
o perform well.</p>
<p>If page * page_size &gt; result set , the call will return an empty arra=
y [] indicating end of data.</p>
<h3 id=3D"TaxonomyAPI-Request.28">Request</h3>
<p>GET /api/taxonomy/node-tenant-product/export?tenant_id=3Dhlnd&amp;graph_=
id=3D114&amp;page_size=3D10000&amp;page=3D10</p>
<h3 id=3D"TaxonomyAPI-Params.6">Params</h3>
<p>tenant_id =3D the tenant for which to export the map</p>
<p>graph_id =3D the tenant category/nav graph identifier</p>
<p>page_size =3D the number of rows to return (suggest 10000)</p>
<p>page =3D page to return (starts at 0)</p>
<h3 id=3D"TaxonomyAPI-Response.22">Response</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{
    "tenant_id": "hlnd",
    "graph_id": "114",
    "page_size": 5,
    "page": 100,
    "item_code_category_map": [
        {
            "item_code": "1820025872",
            "categories": [
                "Product/wine",
                "Product/alcoholic-beverages"
            ]
        },
        {
            "item_code": "1820025872",
            "categories": [
                "Product/distilled-spirits",
                "Product/alcoholic-beverages"
            ]
        },
        {
            "item_code": "1820025883",
            "categories": [
                "Product/beer",
                "Product/alcoholic-beverages"
            ]
        },
        {
            "item_code": "1820025883",
            "categories": [
                "Product/wine",
                "Product/alcoholic-beverages"
            ]
        },
        {
            "item_code": "1820025883",
            "categories": [
                "Product/distilled-spirits",
                "Product/alcoholic-beverages"
            ]
        }
    ]
}</pre>
</div>
</div>
<h3 id=3D"TaxonomyAPI-SeeAlso.6">See Also</h3>
<p></p>
<h2 id=3D"TaxonomyAPI-banner-graph-create">banner-graph-create</h2>
<p>Create a record that registers a graph to a banner (tenant) for a specif=
ic purpose.</p>
<p>Purposes are defined by static reference table.</p>
<p>Only one graph can be registered to a given Banner for a specific purpos=
e</p>
<p>Banner-graph records may optionally specify a node_id other than the Roo=
t node which will, for this purpose act as the proxy node for the sub-graph=
.</p>
<p>The record also stores a Status id indicating the status of the graph (i=
n development, ready for test (PPE) or ready for publish to Production. Thi=
s can be used to control publication functions.</p>
<h3 id=3D"TaxonomyAPI-Request.29">Request</h3>
<p>POST /api/taxonomy/banner-graph/create</p>
<h3 id=3D"TaxonomyAPI-Body.15">Body</h3>
<p></p>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"ab=
4d8ebb-71b4-48c8-8c6f-1be86c78f0e8" class=3D"confluenceTable">
<colgroup>
<col style=3D"width: 148.0px;">
<col style=3D"width: 144.0px;">
<col style=3D"width: 115.0px;">
<col style=3D"width: 353.0px;">
</colgroup>
<tbody>
<tr>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Field</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Type</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Required</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Description</strong></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>banner_id</p></td>
<td class=3D"confluenceTd">
<p>Uniqueidentifier</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>Banner (tenant) See shared.Banner.BannerId</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>graph_id</p></td>
<td class=3D"confluenceTd">
<p>int</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>Graph that is assigned to the Banner</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>node_id</p></td>
<td class=3D"confluenceTd">
<p>Uniqueidentifier</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>optional specification of a node within a graph that is the proxy root o=
f the (sub) graph.</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>graph_purpose_id</p></td>
<td class=3D"confluenceTd">
<p>int</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>id specifying the purpose of the graph for the banner. See DEF_graph_pur=
pose reference.</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>graph_status_id</p></td>
<td class=3D"confluenceTd">
<p>int</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>specifies the status of the graph for the purpose specified.</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>updated_by</p></td>
<td class=3D"confluenceTd">
<p>string</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>user creating or updating the record.</p></td>
</tr>
</tbody>
</table>
</div>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{
&nbsp; &nbsp; "banner_id": "a4c3da6a-9072-44a7-b83c-9d1227d08037",
&nbsp; &nbsp; "graph_id": 29,
&nbsp; &nbsp; "graph_purpose_id": 1,
&nbsp; &nbsp; "graph_status_id": 1,
&nbsp; &nbsp; "updated_by": "breanna@swiftly.com"
}</pre>
</div>
</div>
<p></p>
<p>graph_purpose_id definitions stored in DEF_graph_purpose</p>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"75=
0c9232-2a08-4870-ae5d-25208c42352a" class=3D"confluenceTable">
<colgroup>
<col style=3D"width: 153.0px;">
<col style=3D"width: 256.0px;">
<col style=3D"width: 351.0px;">
</colgroup>
<tbody>
<tr>
<td data-highlight-colour=3D"#b3d4ff" class=3D"confluenceTd">
<p><strong>graph_purpose_id</strong></p></td>
<td data-highlight-colour=3D"#b3d4ff" class=3D"confluenceTd">
<p><strong>graph_purpose_name</strong></p></td>
<td data-highlight-colour=3D"#b3d4ff" class=3D"confluenceTd">
<p><strong>notes</strong></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>1</p></td>
<td class=3D"confluenceTd">
<p>PRODUCT_CATEGORIES</p></td>
<td class=3D"confluenceTd">
<p>Tenant Product Categories (Nav)</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>2</p></td>
<td class=3D"confluenceTd">
<p>COUPONS_CATEGORIES</p></td>
<td class=3D"confluenceTd">
<p>Tenant Coupon Categories</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>3</p></td>
<td class=3D"confluenceTd">
<p>PRODUCT_COUPON_CATEGORIES</p></td>
<td class=3D"confluenceTd">
<p>Combined Product and Coupon Categories</p></td>
</tr>
</tbody>
</table>
</div>
<p>graph_status_id defintions stored in DEF_graph_status</p>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"bb=
16450e-d0dd-4f91-af31-0fb93c601c1e" class=3D"confluenceTable">
<colgroup>
<col style=3D"width: 134.0px;">
<col style=3D"width: 274.0px;">
<col style=3D"width: 352.0px;">
</colgroup>
<tbody>
<tr>
<td data-highlight-colour=3D"#b3d4ff" class=3D"confluenceTd">
<p><strong>graph_status_id</strong></p></td>
<td data-highlight-colour=3D"#b3d4ff" class=3D"confluenceTd">
<p><strong>graph_status_name</strong></p></td>
<td data-highlight-colour=3D"#b3d4ff" class=3D"confluenceTd">
<p><strong>notes</strong></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>0</p></td>
<td class=3D"confluenceTd">
<p>PURGED</p></td>
<td class=3D"confluenceTd">
<p>The graph has been truncated (in anticipation of re-clone)</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>1</p></td>
<td class=3D"confluenceTd">
<p>IN_DEVELOPMENT</p></td>
<td class=3D"confluenceTd">
<p>Under devevelopment</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>2</p></td>
<td class=3D"confluenceTd">
<p>PUBLISHED_DEVELOPMENT</p></td>
<td class=3D"confluenceTd">
<p>Is published to Development (see published_datetime)</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>3</p></td>
<td class=3D"confluenceTd">
<p>READY_PPE</p></td>
<td class=3D"confluenceTd">
<p>Ready for Pre-Production Environment</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>4</p></td>
<td class=3D"confluenceTd">
<p>PUBLISHED_PPE</p></td>
<td class=3D"confluenceTd">
<p>Published to PPE (see published_datetime)</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>5</p></td>
<td class=3D"confluenceTd">
<p>READY_PRODUCTION</p></td>
<td class=3D"confluenceTd">
<p>Ready to publish to Production</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>6</p></td>
<td class=3D"confluenceTd">
<p>PUBLISHED_PRODUCTION</p></td>
<td class=3D"confluenceTd">
<p>Published to Production (see published_datetime)</p></td>
</tr>
</tbody>
</table>
</div>
<h3 id=3D"TaxonomyAPI-Response.23">Response</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{
&nbsp; &nbsp; "banner_graph_id": 6,
&nbsp; &nbsp; "banner_id": "A4C3DA6A-9072-44A7-B83C-9D1227D08037",
&nbsp; &nbsp; "graph_id": 29,
&nbsp; &nbsp; "node_id": null,
&nbsp; &nbsp; "graph_purpose_id": 3,
&nbsp; &nbsp; "graph_status_id": 1,
    "published_datetime": null,
&nbsp; &nbsp; "inserted_datetime": "2024-03-04T11:43:51.510000",
&nbsp; &nbsp; "updated_datetime": "2024-03-04T11:43:51.510000",
&nbsp; &nbsp; "updated_by": "breanna@swiftly.com"
}</pre>
</div>
</div>
<h2 id=3D"TaxonomyAPI-banner-graph-get">banner-graph-get</h2>
<p>Get a banner-graph record by either the the bander_graph_id, banner_id o=
r the graph_id along with an optional graph_purpose_id.</p>
<p>In addition, if no arguments are passed, all banner_graphs will be retur=
ned in a list.</p>
<p>Common use case, I know what the banner_id is; I need to know what graph=
 is the Product/Coupon Category graph (graph_purpose_id=3D3), pass ?banner_=
id=3D&lt;my-banner-id&gt;&amp;graph_purpose_id=3D3</p>
<h3 id=3D"TaxonomyAPI-Request.30">Request</h3>
<p>GET /api/taxonomy/banner-graph/get?banner_graph_id=3D{}&amp;banner_id=3D=
{}&amp;graph_id=3D{}</p>
<h3 id=3D"TaxonomyAPI-Parameters.2">Parameters</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"2e=
89fd6c-2a13-4cf3-85e1-1e746c01955b" class=3D"confluenceTable">
<colgroup>
<col style=3D"width: 154.0px;">
<col style=3D"width: 134.0px;">
<col style=3D"width: 86.0px;">
<col style=3D"width: 382.0px;">
</colgroup>
<tbody>
<tr>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Field</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Type</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Required</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Description</strong></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>banner_graph_id</p></td>
<td class=3D"confluenceTd">
<p>Integer</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>id of the banner_graph record (see get)</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>banner_id</p></td>
<td class=3D"confluenceTd">
<p>Uniqueidentifier</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>the id of the banner</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>graph_id</p></td>
<td class=3D"confluenceTd">
<p>Integer</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>the id of the graph</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>graph_purpose_id</p></td>
<td class=3D"confluenceTd">
<p>Integer</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>get only banner_graphs with this purpose_id. Best used with banner_id to=
 get the specific graph you are looking for.</p></td>
</tr>
</tbody>
</table>
</div>
<h3 id=3D"TaxonomyAPI-Response.24"><span class=3D"inline-comment-marker" da=
ta-ref=3D"ec0e761e-0fa5-47eb-bd32-5217ebc84e33">Response</span></h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">[
&nbsp; &nbsp;  {
        "banner_graph_id": 4,
        "banner_id": "A4C3DA6A-9072-44A7-B83C-9D1227D08037",
        "banner_name": "Homeland",
        "graph_id": 29,
        "graph_name": "animals",
        "node_id": null,
        "graph_purpose_id": 1,
        "graph_purpose_name": "PRODUCT_CATEGORIES",
        "graph_status_id": 2,
        "graph_status_name": "PUBLISHED_DEVELOPMENT",
        "published_datetime": "2024-03-05T11:11:50",
        "inserted_datetime": "2024-03-04T11:11:50.400000",
        "updated_by": "breanna@swiftly.com"
    }
]</pre>
</div>
</div>
<h2 id=3D"TaxonomyAPI-banner-graph-update">banner-graph-update</h2>
<p>Banner-graph-update allows limited PATCH type update to banner-graph rec=
ords.</p>
<p>The banner-graph-id must be available.</p>
<p>The fields that can be updated are: graph_status_id and node_id.</p>
<p>for all other fields (purpose, graph=E2=80=A6) delete the record and cre=
ate a new one.</p>
<h3 id=3D"TaxonomyAPI-Request.31">Request</h3>
<p>POST /api/taxonomy/banner-graph/update</p>
<h3 id=3D"TaxonomyAPI-Body.16">Body</h3>
<div class=3D"table-wrap">
<table data-table-width=3D"760" data-layout=3D"default" data-local-id=3D"12=
55b928-a66f-4607-a3f2-d358454a7843" class=3D"confluenceTable">
<colgroup>
<col style=3D"width: 160.0px;">
<col style=3D"width: 132.0px;">
<col style=3D"width: 115.0px;">
<col style=3D"width: 353.0px;">
</colgroup>
<tbody>
<tr>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Field</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Type</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Required</strong></p></td>
<td data-highlight-colour=3D"#b4c6e7" class=3D"confluenceTd">
<p><strong>Description</strong></p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>banner_graph_id</p></td>
<td class=3D"confluenceTd">
<p>Int</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>id if the banner_graph recodrd</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>node_id</p></td>
<td class=3D"confluenceTd">
<p>Uniqueidentifier</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>optional specification of a node within a graph that is the proxy root o=
f the (sub) graph.</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>graph_status_id</p></td>
<td class=3D"confluenceTd">
<p>int</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>specifies the status of the graph for the purpose specified.</p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>published_datetime</p></td>
<td class=3D"confluenceTd">
<p>string</p></td>
<td class=3D"confluenceTd">
<p>No</p></td>
<td class=3D"confluenceTd">
<p>If graph_status_id is set to 2, 4, 6, set the datetime of publication.</=
p></td>
</tr>
<tr>
<td class=3D"confluenceTd">
<p>updated_by</p></td>
<td class=3D"confluenceTd">
<p>string</p></td>
<td class=3D"confluenceTd">
<p>Yes</p></td>
<td class=3D"confluenceTd">
<p>user creating or updating the record.</p></td>
</tr>
</tbody>
</table>
</div>
<p></p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">&nbsp; =
&nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; "banner_graph_id": 4,
&nbsp; &nbsp; &nbsp; &nbsp; "graph_status_id": 2,
        "published_datetime": "2024-03-05T14:10:12",
&nbsp; &nbsp; &nbsp; &nbsp; "updated_by": "breanna@swiftly.com"
&nbsp; &nbsp; }</pre>
</div>
</div>
<h3 id=3D"TaxonomyAPI-Response.25">Response</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{
&nbsp; &nbsp; "banner_graph_id": 4,
&nbsp; &nbsp; "banner_id": "A4C3DA6A-9072-44A7-B83C-9D1227D08037",
&nbsp; &nbsp; "graph_id": 29,
&nbsp; &nbsp; "node_id": null,
&nbsp; &nbsp; "graph_purpose_id": 1,
&nbsp; &nbsp; "graph_status_id": 2,
    "published_datetime": "2024-03-05T14:10:12",
&nbsp; &nbsp; "inserted_datetime": "2024-03-04T11:11:50.400000",
&nbsp; &nbsp; "updated_datetime": "2024-03-04T12:10:39.403000",
&nbsp; &nbsp; "updated_by": "breanna@swiftly.com"
}</pre>
</div>
</div>
<h2 id=3D"TaxonomyAPI-banner-graph-delete">banner-graph-delete</h2>
<p>Delete a banner_graph record by either it=E2=80=99s record id or by the =
banner_id and the purpose. Either call will delete at most 1 record. The fu=
nction does not return anything but a status code.</p>
<p>banner-graph-update only supports updating of limited fields (intentiona=
lly). Use banner-graph-delete to remove a record if adding a different grap=
h for a banner or changing it=E2=80=99s function. These are considered iden=
tity changes so are not allowed by update.</p>
<h3 id=3D"TaxonomyAPI-Request.32">Request</h3>
<p>DELETE /api/taxonomy/banner-graph/update</p>
<h3 id=3D"TaxonomyAPI-Body.17">Body</h3>
<p>by id:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{&nbsp;=
"banner_graph_id": 1 }</pre>
</div>
</div>
<p>by banner_id and purpose:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{
 &nbsp; "banner_id": "A4C3DA6A-9072-44A7-B83C-9D1227D08037",
&nbsp; &nbsp;"graph_purpose_id": 1
}</pre>
</div>
</div>
<h3 id=3D"TaxonomyAPI-Response.26">Response</h3>
<p>200, 500</p>
<h3 id=3D"TaxonomyAPI-SeeAlso.7">See Also</h3>
<p>banner-graph-update</p>
<p></p>
<h2 id=3D"TaxonomyAPI-banner-graph-publish">banner-graph-publish</h2>
<p>Publish the graph associated with the banner_graph to the specified PGSQ=
L environment.</p>
<p>The graph_status_id of the banner_graph must be set to the =E2=80=9Cread=
y=E2=80=9D level for the respective environment in order for the publish to=
 work.</p>
<p>Publication, whether successful or failure will be logged. See below</p>
<h3 id=3D"TaxonomyAPI-Request.33">Request</h3>
<p>POST /api/taxonomy/banner-graph/publish</p>
<h3 id=3D"TaxonomyAPI-Body.18">Body</h3>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{
&nbsp; &nbsp; "banner_graph_id": 7,
&nbsp; &nbsp; "environment": "PROD",
&nbsp; &nbsp; "updated_by": "breanna@swiftly.com"
}</pre>
</div>
</div>
<h3 id=3D"TaxonomyAPI-Response.27">Response</h3>
<p>200, 404, 500</p>
<p>Successful response:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">{
&nbsp; &nbsp; "status": "success",
&nbsp; &nbsp; "nodes_published": 175,
&nbsp; &nbsp; "links_published": 174
}</pre>
</div>
</div>
<h3 id=3D"TaxonomyAPI-SeeAlso.8">See Also</h3>
<p>banner-graph-publish-log-list</p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
    </div>
</body>
</html>
------=_Part_58_1098090628.1751325121534
Content-Type: application/octet-stream
Content-Transfer-Encoding: base64
Content-Location: file:///C:/f159402e7fda27e62c30fcdfc3f31a99341a4eca5781ab50b7b2433b7ac2e085

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
AAAAAElFTkSuQmCC
------=_Part_58_1098090628.1751325121534--
